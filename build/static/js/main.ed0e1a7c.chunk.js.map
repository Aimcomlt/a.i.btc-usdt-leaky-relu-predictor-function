{"version":3,"sources":["actions/bitcoinActions.js","App.js","serviceWorker.js","reducers/bitcoinReducer.js","reducers/brainReducer.js","reducers/rootReducer.js","Store.js","index.js"],"names":["config","binaryThresh","log","learningRate","momentum","hiddenLayers","activation","leakyReluAlpha","OpNNPredictorBrain","brain","NeuralNetwork","HighPredictionBrain","LowPredictionBrain","ClosePredictionBrain","OpenReAquiredTarget","OpenReAquiredTargetHG","OpenReAquiredTargetCL","OpenReAquiredTargetLW","OpenBrainResulta","CloseBrainResulta","HighBrainResulta","LowBrainResulta","OpenBrainResultb","CloseBrainResultb","HighBrainResultb","LowBrainResultb","OpenBrainResultc","CloseBrainResultc","HighBrainResultc","LowBrainResultc","OpenBrainResultd","CloseBrainResultd","HighBrainResultd","LowBrainResultd","OpenBrainResulte","CloseBrainResulte","HighBrainResulte","LowBrainResulte","OpenBrainResultf","CloseBrainResultf","HighBrainResultf","LowBrainResultf","LayerIIOpenResult","LayerIIOpenResultElem1","LayerIIHighResult","LayerIIHighResultElem2","LayerIILowResult","LayerIILowResultElem3","LayerIICloseResult","LayerIICloseResultElem4","mouthSize","mouthCeilingSize","mouthFloorSize","TongueSize","BrOpToNewOp","BrHgToNewHg","BrLwToNewLw","BrClToNewCl","theZeroLine","OpenMomentumX","HighMomentumX","LowMomentumX","CloseMomentumX","OpenVsMomentum","HighVsMomentum","LowVsMomentum","CloseVsMomentum","MomentumXOpen","MomentumYOpen","MomXOpenMesurement","MomYOpenMesurement","MomentumXHigh","MomXHighMesurement","MomentumYHigh","MomYHighMesurement","MomentumXLow","MomXLowMesurement","MomentumYLow","MomYLowMesurement","MomentumXClose","MomXCloseMesurement","MomentumYClose","MomYCloseMesurement","OpenP1","ElemP1","HighP2","ElemP2","LowP3","ElemP3","CloseP4","ElemP4","mailBox","globalLength","TempepoxNum","TempXhigh","TempXopen","TempXlow","TempXclose","push","TempCHepoxNum","TempCHXopen","TempCHXhigh","TempCHXlow","TempCHXclose","increment","trigger","Chart","register","ChartStreaming","App","dispatch","useDispatch","state","useSelector","bitcoin","stateB","React","useState","num","mom","percentMoveO","MoveO","percentMoveH","MoveH","percentMoveL","MoveL","percentMoveC","MoveC","initA","InitAmountopen","setInitAmountOP","InitAmounthigh","setInitAmountHGH","InitAmountlow","setInitAmountLW","InitAmountclose","setInitAmountCL","SupplyA","setSupplyA","SupplyB","setSupplyB","SupplyC","setSupplyC","SupplyD","setSupplyD","i","length","dataOpen","dataHigh","dataLow","dataClose","dataTotal","console","fetchData","time","number","a","ZeroLine","x","MASTERCORE","el","openMomentumX","boxX","boxXMesurement","openMomentumY","boxY","boxYMesurement","highMomentumX","highMomentumY","lowMomentumX","lowMomentumY","closeMomentumX","closeMomentumY","type","positionOfArray","axios","get","responseA","vbv","data","vbz","ThePrice","HighPrice","LowPrice","ClosePrice","fff","labels","open","high","low","close","openMA","highMA","lowMA","closeMA","ddd","globalNormValu","OpenPredictedResult","b","c","d","e","f","sss","input","hgha","hghb","hghc","hghd","hghe","hghf","lwa","lwb","lwc","lwd","lwe","lwf","cla","clb","clc","cld","cle","clf","output","opa","opb","opc","opd","ope","opf","train","iterations","errorThresh","BrainOpenPrResult","run","HighPredictedResult","BrainHighPrResult","LowPredictedResult","BrainLowPrResult","ClosePredictedResult","BrainClosePrResult","epoxResult","openResult","highResult","lowResult","closeResult","ppp","openBrainResult","jjj","AvgElem1OpenOpen","Elem1","elemOf1","elemOf1B","elemOf1C","highBrainResult","kkk","AvgElem2HighHigh","Elem2","elemOf2","elemOf2B","elemOf2C","lowBrainResult","hhh","AvgElem3LowLow","Elem3","elemOf3","elemOf3B","elemOf3C","closeBrainResult","ggg","AvgElem4CloseClose","Elem4","elemOf4","elemOf4B","elemOf4C","LowPredicted","RealLow","HghPredicted","RealHigh","ClsPredicted","RealClose","RvsPredicted","lll","I","II","III","IV","V","VI","VII","VIII","IX","X","XI","XII","latessOPvs8Lines","predictedOPvs8Lines","subLatessOPvsPredicted","myAvgOPBoxFinalResult","myAvgOPBoxFinalResultB","myAvgOPBoxFinalResultI","myAvgOPBoxFinalResultIB","myAvgOPBoxI","myAvgOPBoxResultI","oooo","ddso","ssdo","reduce","sum","value","sddso","myAvgOPBox","myAvgOPBoxResult","arrayPos","coreO","openRlt","AccAvg","mmmo","mnmo","nmno","latessHGHvs8Lines","predictedHGHvs8Lines","subLatessHGHvsPredicted","myAvgHGHBoxFinalResult","myAvgHGHBoxFinalResultB","myAvgHGHBoxFinalResultI","myAvgHGHBoxFinalResultIB","myAvgHGHBoxI","myAvgHGHBoxResultI","oooh","ddsh","ssdh","sddsh","myAvgHGHBox","myAvgHGHBoxResult","oporr","sdssh","dsddh","dssdh","mmmh","mnmh","nmnh","latessLWvs8Lines","predictedLWvs8Lines","subLatessLWvsPredicted","myAvgLWBoxFinalResult","myAvgLWBoxFinalResultB","myAvgLWBoxFinalResultI","myAvgLWBoxFinalResultIB","myAvgLWBoxI","myAvgLWBoxResultI","oool","dds","ssd","sdds","myAvgLWBox","myAvgLWBoxResult","opor","sdss","dsdd","dssd","mmmr","mnm","nmn","latessCLVS8Lines","predictedCLVS8Lines","subLatessCLVSPredicted","myAvgCLBoxFinalResult","myAvgCLBoxFinalResultB","myAvgCLBoxFinalResultI","myAvgCLBoxFinalResultIB","myAvgBoxI","myAvgBoxResultI","ooo","myAvgBox","myAvgBoxResult","opo","sds","dsd","mmm","LayerIIOpenBrain","avergl","elm2","elm3","elm4","obr","hbr","lbr","cbr","hp","lp","cp","op","elm1","LayerIIOPBrainResult","LayerIIHighBrainPrice","LayerIIHGBrainResult","LayerIILowBrainPrice","LayerIILWBrainResult","LayerIICloseBrainPrice","LayerIICLBrainResult","thePrice","highPrice","lowPrice","closePrice","ChartLatessOP","ChartLatessHP","ChartLatessLP","ChartLatessCP","xTicks","payload","getData","initAmountOP","initAmountHGH","initAmountLW","initAmountCL","maxSupplyA","maxSupplyB","maxSupplyC","maxSupplyD","className","align","src","marginLeft","style","width","height","color","alt","press","here","marginRight","href","options","responsive","onClick","setInterval","onChange","target","marginBottom","loading","dataOPEN","dataTimeTwistOPEN","dataHIGH","dataTimeTwistHIGH","dataLOW","dataTimeTwistLOW","dataCLOSE","dataTimeTwist","dataG","dataC","dataD","dataB","marginTop","button","backgroundColor","rel","Boolean","window","location","hostname","match","initalState","datasets","label","borderColor","pointBorderColor","borderWidth","yAxes","ticks","min","max","stepSize","plugins","title","display","text","scales","realtime","duration","bitcoinReducer","action","order","Loading","callback","index","values","dataF","dataH","brainReducer","exports","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ed0e1a7c.chunk.js","sourcesContent":["import axios from \"axios\";\r\nimport brain from 'brain.js/src/index';\r\n\r\n\r\nconst config = {\r\n  binaryThresh: 0.05,\r\n  log: false, \r\n  learningRate: 0.3,\r\n  momentum: 0.08,\r\n  hiddenLayers: [50], // array of ints for the sizes of the hidden layers in the network\r\n  activation: 'leaky-relu', // supported activation types: ['sigmoid', 'relu', 'leaky-relu', 'tanh'],\r\n  leakyReluAlpha: 0.01, // supported for activation type 'leaky-relu'\r\n};\r\n// INITIALIZING FOUR NEW NEURAL NETWORK INSTANCES \r\nconst OpNNPredictorBrain = new brain.NeuralNetwork(config);\r\nconst HighPredictionBrain = new brain.NeuralNetwork(config);\r\nconst LowPredictionBrain = new brain.NeuralNetwork(config);\r\nconst ClosePredictionBrain = new brain.NeuralNetwork(config);\r\n//  INITIALIZING LAYER TWO NEURAL NETWORK INSTANCES\r\nconst OpenReAquiredTarget = new brain.NeuralNetwork(config);\r\nconst OpenReAquiredTargetHG = new brain.NeuralNetwork(config);\r\nconst OpenReAquiredTargetCL = new brain.NeuralNetwork(config);\r\nconst OpenReAquiredTargetLW = new brain.NeuralNetwork(config);\r\n\r\n//const timeStamp = [];\r\n\r\n\r\n//THE A.I. PREDICTION RESULT: INITIALIZING ARRAYS OHLC\r\n\r\nconst OpenBrainResulta = [];\r\nconst CloseBrainResulta = [];\r\nconst HighBrainResulta = [];\r\nconst LowBrainResulta = [];\r\n\r\nconst OpenBrainResultb = [];\r\nconst CloseBrainResultb = [];\r\nconst HighBrainResultb = [];\r\nconst LowBrainResultb = [];\r\n\r\nconst OpenBrainResultc = [];\r\nconst CloseBrainResultc = [];\r\nconst HighBrainResultc = [];\r\nconst LowBrainResultc = [];\r\n\r\nconst OpenBrainResultd = [];\r\nconst CloseBrainResultd = [];\r\nconst HighBrainResultd = [];\r\nconst LowBrainResultd = [];\r\n\r\nconst OpenBrainResulte = [];\r\nconst CloseBrainResulte = [];\r\nconst HighBrainResulte = [];\r\nconst LowBrainResulte = [];\r\n\r\nconst OpenBrainResultf = [];\r\nconst CloseBrainResultf = [];\r\nconst HighBrainResultf = [];\r\nconst LowBrainResultf = [];\r\n\r\n\r\n// LAYER TWO RE-AQUIRED TARGET PRICE OF ASSET OHLC\r\nconst LayerIIOpenResult = [];\r\nconst LayerIIOpenResultElem1 = [];\r\nconst LayerIIHighResult = [];\r\nconst LayerIIHighResultElem2 = [];\r\nconst LayerIILowResult = [];\r\nconst LayerIILowResultElem3 = [];\r\nconst LayerIICloseResult = [];\r\nconst LayerIICloseResultElem4 = [];\r\n//some build up arrays\r\nconst mouthSize = []; //predicted high - predicted low = difference \r\nconst mouthCeilingSize = []; //predicted high - latess market high = difference\r\nconst mouthFloorSize = []; // predicted low - latess market low = difference\r\nconst TongueSize = []; //latess market high - latess market low = difference \r\nconst BrOpToNewOp = []; //brain open prediction vs elem1 = openPrediction + open LatesMarketPrice divide by 2 for average to scope for the difference between its self(the brain output) and a new element the latess data.This way the output can be re-used in theory into a new instance of a neural networks PS: All ways make sure that a latess data is added to any formula \r\nconst BrHgToNewHg = [];\r\nconst BrLwToNewLw = [];\r\nconst BrClToNewCl = [];\r\n\r\nconst theZeroLine = [];\r\n\r\nconst OpenMomentumX = [];\r\nconst HighMomentumX = [];\r\nconst LowMomentumX = [];\r\nconst CloseMomentumX = [];\r\n\r\nconst OpenVsMomentum = [];\r\nconst HighVsMomentum = [];\r\nconst LowVsMomentum = [];\r\nconst CloseVsMomentum = [];\r\n\r\nconst MomentumXOpen = [];\r\nconst MomentumYOpen = [];\r\nconst MomXOpenMesurement = [];\r\nconst MomYOpenMesurement = [];\r\n\r\nconst MomentumXHigh = [];\r\nconst MomXHighMesurement = [];\r\nconst MomentumYHigh = [];\r\nconst MomYHighMesurement = [];\r\n\r\nconst MomentumXLow = [];\r\nconst MomXLowMesurement = [];\r\nconst MomentumYLow = [];\r\nconst MomYLowMesurement = [];\r\n\r\nconst MomentumXClose = [];\r\nconst MomXCloseMesurement = [];\r\nconst MomentumYClose = [];\r\nconst MomYCloseMesurement = [];\r\n\r\n\r\nconst OpenP1 = [];\r\nconst ElemP1 = [];\r\nconst HighP2 = [];\r\nconst ElemP2 = [];\r\nconst LowP3 = [];\r\nconst ElemP3 = [];\r\nconst CloseP4 = [];\r\nconst ElemP4 = [];\r\n\r\n\r\n\r\n\r\n///////////////////////\r\nexport const mailBox  = []\r\n//INITIALIZING ARRAYS FOR THE AXIOS GET FUNCTION \r\n  \r\n    const globalLength = [];\r\n    const TempepoxNum = [];\r\n    const TempXhigh = [];\r\n    const TempXopen = [];\r\n    const TempXlow = [];\r\n    const TempXclose = [];\r\n\r\n    mailBox.push( \r\n      TempXhigh ,\r\n      TempXopen,\r\n      TempXlow,\r\n      TempXclose\r\n    )\r\n    \r\n    const TempCHepoxNum = [];\r\n    const TempCHXopen = [];\r\n    const TempCHXhigh = [];\r\n    const TempCHXlow = [];\r\n    const TempCHXclose = [];\r\n\r\n    //console.log('CHECKING THE ARRAY******************** AFTER THE RESPONSE CALL AND DOES NOT EXCCED 1000: ',TempXopen.length)\r\n    let increment = [];\r\n    let trigger = increment;\r\n\r\n     //console.log('------------------------here--:ZZZ value increment test',increment)\r\n\r\nexport const getData = ({ time, number, momentum }) => async dispatch => {\r\n\r\n  try {\r\n    dispatch({\r\n      type: \"AWAITING_BITCOIN\"\r\n    })\r\n\r\n//console.log('///////////////////////DISPATCH--STARTED------------//////////////');\r\n  \r\n    trigger++;\r\n    increment.push(trigger)\r\n    //console.log('INCREMENT TRIGGER: ', increment[trigger])\r\n  \r\n    let positionOfArray = increment.length\r\n    //console.log('---increment[positionOfArray]---here--: INCREMENT DEV TEST MUST START AT 0:500: ', 'TRIGGER: ', trigger, 'Pos-Array: ', positionOfArray, 'Pos-ArrayTrigger: ', positionOfTrigger)\r\n    //console.log('B-CHECKING THE ARRAY***DEV--TEST***reponceXopen*** AFTER A SPLICE TASK : ',TempXopen.length, TempXopen )\r\n   \r\n    /*\r\n    const fruits = [\"Banana\", \"Orange\", \"Lemon\", \"Apple\", \"Mango\"];\r\nconst citrus = fruits.slice(0, 5);\r\n*/\r\n              \r\n  //THE ACTUAL IMPLEMENTATION OF THE AXIOS GET FUNCTION ***REMINDER BINANCE MAX CALL IS 500 \r\nconst responseA = await axios.get(`https://api.binance.com/api/v3/klines?symbol=BTCUSDT&interval=1m`);\r\n//Percentage.push(responseA.data[499][1] - responseA.data[498][1]);\r\n\r\n//console.log(Percentage)\r\nif(TempepoxNum.length >= 500)\r\n{\r\n  var vbv = responseA.data.length -1;\r\n  TempepoxNum.push(responseA.data[vbv][0])\r\n  TempXopen.push(responseA.data[vbv][1]);\r\n  TempXhigh.push(responseA.data[vbv][2]);\r\n  TempXlow.push(responseA.data[vbv][3]);\r\n  TempXclose.push(responseA.data[vbv][4]);\r\n}else\r\n{\r\n  for (let i = 0; i < (responseA.data.length); i++) {\r\n    globalLength.push(responseA.data.length);\r\n    TempepoxNum.push(responseA.data[i][0]);\r\n    TempXopen.push(responseA.data[i][1]);\r\n    TempXhigh.push(responseA.data[i][2]); \r\n    TempXlow.push(responseA.data[i][3]);\r\n    TempXclose.push(responseA.data[i][4]);\r\n}\r\n}\r\nif(TempCHepoxNum.length >= 500){\r\n  var vbz = responseA.data.length -1;\r\n  TempCHepoxNum.push(responseA.data[vbz][0])\r\n  TempCHXopen.push(responseA.data[vbz][1]);\r\n  TempCHXhigh.push(responseA.data[vbz][2]);\r\n  TempCHXlow.push(responseA.data[vbz][3]);\r\n  TempCHXclose.push(responseA.data[vbz][4]); \r\n\r\n}else{\r\n  for (let i = 0; i < (responseA.data.length); i++) {\r\n  TempCHepoxNum.push(responseA.data[i][0])\r\n  TempCHXopen.push(responseA.data[i][1]);\r\n  TempCHXhigh.push(responseA.data[i][2]);\r\n  TempCHXlow.push(responseA.data[i][3]);\r\n  TempCHXclose.push(responseA.data[i][4]); \r\n}\r\n}\r\n\r\n\r\n//console.log('CH-EPOX: ', TempCHepoxNum, 'CH-O: ', TempCHXopen,'CH-H: ', TempCHXhigh,'CH-L: ', TempCHXlow,'CH-C: ', TempCHXclose);\r\n \r\n    \r\n  //  let valueX = TempXopen.length;\r\n\r\n    //console.log('EPOX: ', TempepoxNum, 'O: ', TempXopen,'H: ', TempXhigh,'L: ', TempXlow,'C: ', TempXclose);\r\n  \r\n    //console.log('******MASTER X EPOX-NUMBER | OPEN | HIGH | LOW | CLOSE: ',TempCHepoxNum, TempCHXopen , TempCHXhigh, TempXlow, TempCHXclose)\r\n    //console.log('CHECKING THE ARRAY AFTER THE RESPONSE CALL AND DOES NOT EXCCED 1000: ',TempCHXopen.length, 'vs the valueX: ', valueX)\r\n\r\n\r\n\r\n    const chartLength = [];\r\n    chartLength.push(TempXopen.length)\r\n\r\n    \r\n    //INITIALIZE SOME ARRAYS FOR TASKS\r\n    const ThePrice = [];\r\n    const HighPrice = [];\r\n    const LowPrice = [];\r\n    const ClosePrice = [];\r\n\r\n    //console.log(epoxNum.length)\r\n    //console.log(globalLength[0], 'ClosePrice: ', ClosePrice)\r\n\r\n\r\n\r\n//THE TASKS TO PROPOGATE THE DATA FOR THOSE INITIAL ARRAYS \r\n\r\nfor(let i = 0; i < TempXopen.length; i++)\r\n{\r\n  var fff = 0;\r\n  if (i < 0) {fff = i - 1}else{fff = i}\r\n    ThePrice.push(TempXopen[fff]);      \r\n    HighPrice.push(TempXhigh[fff]);     \r\n    LowPrice.push(TempXlow[fff]); \r\n    ClosePrice.push(TempXclose[fff]);\r\n}\r\n\r\n\r\n/*\r\n      console.log('***************OPEN ***********', ThePrice)\r\n      console.log('***************HIGH ***********', HighPrice);\r\n      console.log('***************LOW ***********', LowPrice);\r\n      console.log('***************CLOSE ***********', ClosePrice);\r\n*/\r\n\r\n// CONSOLE LOG ANY THING THAT MIGHT HELP YOU BUILD A BETTER FUTUR \r\n/*\r\nconsole.log(Date.now())\r\nconsole.log('OPEN PRICE: ', TempXopen[0], '-: ', ThePrice[ThePrice.length -1]);\r\nconsole.log('HIGH PRICE: ', TempXhigh[0], '-: ', HighPrice[HighPrice.length -1]);\r\nconsole.log('LOW PRICE: ', TempXlow[0], '-: ', LowPrice[LowPrice.length -1]);  \r\nconsole.log('CLOSE PRICE: ',TempXclose[0], '-: ', ClosePrice[ClosePrice.length -1]);\r\n */\r\n// INITIALIZING MORE ARRAYS FOR MORE TASKS \r\n    const labels = [];\r\n\r\n    //THE CHART'S KLINE ARRAYS\r\n    const open = [];\r\n    const high = [];\r\n    const low = [];\r\n    const close = [];\r\n\r\n//INITIALIZING MOVING AVERAGE ARRAYS\r\n    const openMA = [];\r\n    const highMA = [];\r\n    const lowMA = [];\r\n    const closeMA = [];\r\n\r\n//TASK TO PROPOGATE THE KLINE DATA TO THE CHART\r\n\r\n    for (let i = 0; i < (TempXopen.length); i++) {\r\n    var ddd = 0;\r\n      if(i < 0){ddd = i - 1}else{ddd = i}\r\n        highMA.push(TempXhigh[ddd]) \r\n        labels.push(TempepoxNum[ddd]) \r\n        open.push(TempXopen[ddd]) \r\n        high.push(TempXhigh[ddd]) \r\n        close.push(TempXclose[ddd]) \r\n        low.push(TempXlow[ddd])  \r\n        openMA.push(TempXopen[ddd])\r\n        highMA.push(TempXhigh[ddd])\r\n        lowMA.push(TempXlow[ddd])\r\n        closeMA.push(TempXclose[ddd])\r\n      \r\n\r\n      \r\n      if (i === (number - 1)) {\r\n        break;\r\n      }\r\n    }\r\n \r\n\r\n    //////////////////////////////************************************GLOBAL NORMALIZATION VALUE HERE ANY TIME YOU CHANGE ASSETS  */\r\n    ///////EXAMPLE BITCOIN PRICE AVERAGES AROUND 5 DIGITS 10 000 AND ABOVE IS 5 DIGITS BY * 0.00001 IT NORMALIZES THE VALUE FOR THE BRAIN BETWEEN 0 AND 1\r\n    ///////EXAMPLE ETHER PRICE AVERAGES AROUND 4 DIGITS 1000 AND ABOVE IS 4 DIGITS BY * 0.0001\r\n    const globalNormValu = 0.00001;\r\n\r\n////////////////////////////////******//BEGINING OF THE NEURAL NETWORK//*********\r\n\r\n// THE OPEN PRICE NEURAL NETWORK PREDICTION BRAIN #1\r\n    const OpenPredictedResult = [];\r\n    //prepare fetch different position from array to insert in the push STILL IN ACTIVE DEVELOPEMENT LAYER@2.0.0\r\n    for (let i = 0; i < TempXopen.length; i++) {\r\n    var a = i + 4;//5 start array\r\n    if (a > TempXopen.length-1) { a = i };\r\n    var b = i + 3;//4 start array\r\n    if (b > TempXopen.length-1) { b = i };\r\n    var c = i + 2;//3 start array\r\n    if (c > TempXopen.length-1) { c = i };\r\n    var d = i + 1;//2 start array\r\n    if (d > TempXopen.length-1) { d = i };\r\n    var e = i;//1 start array\r\n    if (e > TempXopen.length-1) { e = i };\r\n    var f = 0;\r\n    if (i > 0 ){ f = i - 1 }else{ f = i }\r\n\r\n\r\n\r\n    var sss = TempXopen.length - 1\r\n      OpenPredictedResult.push({\r\n\t\t  input: {\r\n        hgha: TempXhigh[a] * globalNormValu,\r\n        hghb: TempXhigh[b] * globalNormValu,\r\n        hghc: TempXhigh[c] * globalNormValu,\r\n        hghd: TempXhigh[d] * globalNormValu,\r\n        hghe: TempXhigh[e] * globalNormValu,\r\n        hghf: TempXhigh[f] * globalNormValu,\r\n        lwa: TempXlow[a] * globalNormValu,\r\n        lwb: TempXlow[b] * globalNormValu,\r\n        lwc: TempXlow[c] * globalNormValu,\r\n        lwd: TempXlow[d] * globalNormValu,\r\n        lwe: TempXlow[e] * globalNormValu,\r\n        lwf: TempXlow[f] * globalNormValu,\r\n        cla: TempXclose[a] * globalNormValu,\r\n        clb: TempXclose[b] * globalNormValu,\r\n        clc: TempXclose[c] * globalNormValu,\r\n        cld: TempXclose[d] * globalNormValu,\r\n        cle: TempXclose[e] * globalNormValu,\r\n        clf: TempXclose[i-1] * globalNormValu,\r\n\t\t\t      },\r\n\t\t  output: {\r\n        opa: TempXopen[a] * globalNormValu,\r\n        opb: TempXopen[b] * globalNormValu,\r\n        opc: TempXopen[c] * globalNormValu,\r\n        opd: TempXopen[d] * globalNormValu,\r\n        ope: TempXopen[e] * globalNormValu,\r\n        opf: TempXopen[f] * globalNormValu,\r\n\t\t\t\t\t}\r\n        })\r\n      }\r\n      //console.log('BRAIN OPEN PRICE TRAINING ARRAY : ', CenterOpenBrain)\r\n\r\n      \r\n      OpNNPredictorBrain.train(OpenPredictedResult, {\r\n        iterations: 20500,\r\n        errorThresh: 0.05,\r\n        log: false,\r\n        learningRate: 0.29,\r\n        momentum: momentum,\r\n        hiddenLayers: [50], // array of ints for the sizes of the hidden layers in the network\r\n        activation: 'leaky-relu', // supported activation types: ['sigmoid', 'relu', 'leaky-relu', 'tanh'],\r\n        leakyReluAlpha: 0.01, // supported for activation type 'leaky-relu'\r\n           });\r\n          \r\n           \r\n           const BrainOpenPrResult = OpNNPredictorBrain.run({\r\n\r\n            hgha: TempXhigh[sss-5] * globalNormValu,\r\n            hghb: TempXhigh[sss-4] * globalNormValu,\r\n            hghc: TempXhigh[sss-3] * globalNormValu,\r\n            hghd: TempXhigh[sss-2] * globalNormValu,\r\n            hghe: TempXhigh[sss-1] * globalNormValu,\r\n            hghf: TempXhigh[sss] * globalNormValu,\r\n            lwa: TempXlow[sss-5] * globalNormValu,\r\n            lwb: TempXlow[sss-4] * globalNormValu,\r\n            lwc: TempXlow[sss-3] * globalNormValu,\r\n            lwd: TempXlow[sss-2] * globalNormValu,\r\n            lwe: TempXlow[sss-1] * globalNormValu,\r\n            lwf: TempXlow[sss] * globalNormValu,\r\n            cla: TempXclose[sss-5] * globalNormValu,\r\n            clb: TempXclose[sss-4] * globalNormValu,\r\n            clc: TempXclose[sss-3] * globalNormValu,\r\n            cld: TempXclose[sss-2] * globalNormValu,\r\n            cle: TempXclose[sss-1] * globalNormValu,\r\n            clf: TempXclose[sss] * globalNormValu,\r\n\r\n            \r\n                    });\r\n\r\n// THE HIGH PRICE NEURAL NETWORK PREDICTION BRAIN #2\r\n                             const HighPredictedResult = [];\r\n                             for (let i = 0; i < TempXhigh.length; i++) {\r\n\r\n         \r\n                               HighPredictedResult.push({\r\n                                input: {\r\n                                  opa: TempXopen[a] * globalNormValu,\r\n                                  opb: TempXopen[b] * globalNormValu,\r\n                                  opc: TempXopen[c] * globalNormValu,\r\n                                  opd: TempXopen[d] * globalNormValu,\r\n                                  ope: TempXopen[e] * globalNormValu,\r\n                                  opf: TempXopen[f] * globalNormValu,\r\n                                   lwa: TempXlow[a] * globalNormValu,\r\n                                   lwb: TempXlow[b] * globalNormValu,\r\n                                   lwc: TempXlow[c] * globalNormValu,\r\n                                   lwd: TempXlow[d] * globalNormValu,\r\n                                   lwe: TempXlow[e] * globalNormValu,\r\n                                   lwf: TempXlow[f] * globalNormValu,\r\n                                   cla: TempXclose[a] * globalNormValu,\r\n                                   clb: TempXclose[b] * globalNormValu,\r\n                                   clc: TempXclose[c] * globalNormValu,\r\n                                   cld: TempXclose[d] * globalNormValu,\r\n                                   cle: TempXclose[e] * globalNormValu,\r\n                                   clf: TempXclose[f] * globalNormValu,\r\n                                    },\r\n                              output: {\r\n                                hgha: TempXhigh[a] * globalNormValu,\r\n                                hghb: TempXhigh[b] * globalNormValu,\r\n                                hghc: TempXhigh[c] * globalNormValu,\r\n                                hghd: TempXhigh[d] * globalNormValu,\r\n                                hghe: TempXhigh[e] * globalNormValu,\r\n                                hghf: TempXhigh[f] * globalNormValu,\r\n                                  }\r\n                               })\r\n                             }\r\n                             //console.log('BRAIN HIGH PRICE TRAINING ARRAY : ', RightHighBrain)\r\n                      \r\n                             HighPredictionBrain.train(HighPredictedResult, {\r\n                                 errorThresh: 0.05,\r\n                                 log: false, \r\n                                 learningRate: 0.29,\r\n                                 momentum: momentum,\r\n                                 hiddenLayers: [50], // array of ints for the sizes of the hidden layers in the network\r\n                                 activation: 'leaky-relu', // supported activation types: ['sigmoid', 'relu', 'leaky-relu', 'tanh'],\r\n                                 leakyReluAlpha: 0.01, // supported for activation type 'leaky-relu'\r\n                                });\r\n                                const BrainHighPrResult = HighPredictionBrain.run({\r\n         \r\n                                  opa: TempXopen[sss-5] * globalNormValu,\r\n                                  opb: TempXopen[sss-4] * globalNormValu,\r\n                                  opc: TempXopen[sss-3] * globalNormValu,\r\n                                  opd: TempXopen[sss-2] * globalNormValu,\r\n                                  ope: TempXopen[sss-1] * globalNormValu,\r\n                                  opf: TempXopen[sss] * globalNormValu,\r\n                                   lwa: TempXlow[sss-5] * globalNormValu,\r\n                                   lwb: TempXlow[sss-4] * globalNormValu,\r\n                                   lwc: TempXlow[sss-3] * globalNormValu,\r\n                                   lwd: TempXlow[sss-2] * globalNormValu,\r\n                                   lwe: TempXlow[sss-1] * globalNormValu,\r\n                                   lwf: TempXlow[sss] * globalNormValu,\r\n                                   cla: TempXclose[sss-5] * globalNormValu,\r\n                                   clb: TempXclose[sss-4] * globalNormValu,\r\n                                   clc: TempXclose[sss-3] * globalNormValu,\r\n                                   cld: TempXclose[sss-2] * globalNormValu,\r\n                                   cle: TempXclose[sss-1] * globalNormValu,\r\n                                   clf: TempXclose[sss] * globalNormValu,\r\n                                 });\r\n\r\n // THE LOW PRICE NEURAL NETWORK PREDICTION BRAIN #3\r\n                    const LowPredictedResult = [];\r\n                    for (let i = 0; i < TempXlow.length; i++) {\r\n\r\n                      LowPredictedResult.push({\r\n                        input: {\r\n                          opa: TempXopen[a] * globalNormValu,\r\n                          opb: TempXopen[b] * globalNormValu,\r\n                          opc: TempXopen[c] * globalNormValu,\r\n                          opd: TempXopen[d] * globalNormValu,\r\n                          ope: TempXopen[e] * globalNormValu,\r\n                          opf: TempXopen[f] * globalNormValu,\r\n                          hgha: TempXhigh[a] * globalNormValu,\r\n                          hghb: TempXhigh[b] * globalNormValu,\r\n                          hghc: TempXhigh[c] * globalNormValu,\r\n                          hghd: TempXhigh[d] * globalNormValu,\r\n                          hghe: TempXhigh[e] * globalNormValu,\r\n                          hghf: TempXhigh[f] * globalNormValu,\r\n                           cla: TempXclose[a] * globalNormValu,\r\n                           clb: TempXclose[b] * globalNormValu,\r\n                           clc: TempXclose[c] * globalNormValu,\r\n                           cld: TempXclose[d] * globalNormValu,\r\n                           cle: TempXclose[e] * globalNormValu,\r\n                           clf: TempXclose[f] * globalNormValu,\r\n                            },\r\n                      output: {\r\n                        lwa: TempXlow[a] * globalNormValu,\r\n                        lwb: TempXlow[b] * globalNormValu,\r\n                        lwc: TempXlow[c] * globalNormValu,\r\n                        lwd: TempXlow[d] * globalNormValu,\r\n                        lwe: TempXlow[e] * globalNormValu,\r\n                        lwf: TempXlow[f] * globalNormValu,\r\n                          }\r\n                      })\r\n                    }\r\n                    //console.log('BRAIN LOW PRICE TRAINING ARRAY :', LeftLowBrain)\r\n                    LowPredictionBrain.train(LowPredictedResult, {\r\n                        errorThresh: 0.05,\r\n                        log: false, \r\n                        learningRate: 0.29,\r\n                        momentum: momentum,\r\n                        hiddenLayers: [50], // array of ints for the sizes of the hidden layers in the network\r\n                        activation: 'leaky-relu', // supported activation types: ['sigmoid', 'relu', 'leaky-relu', 'tanh'],\r\n                        leakyReluAlpha: 0.01, // supported for activation type 'leaky-relu'\r\n                       });\r\n                       const BrainLowPrResult = LowPredictionBrain.run({\r\n\r\n                         opa: TempXopen[sss-5] * globalNormValu,\r\n                        opb: TempXopen[sss-4] * globalNormValu,\r\n                        opc: TempXopen[sss-3] * globalNormValu,\r\n                        opd: TempXopen[sss-2] * globalNormValu,\r\n                        ope: TempXopen[sss-1] * globalNormValu,\r\n                        opf: TempXopen[sss] * globalNormValu,\r\n                         hgha: TempXhigh[sss-5] * globalNormValu,\r\n                         hghb: TempXhigh[sss-4] * globalNormValu,\r\n                         hghc: TempXhigh[sss-3] * globalNormValu,\r\n                         hghd: TempXhigh[sss-2] * globalNormValu,\r\n                         hghe: TempXhigh[sss-1] * globalNormValu,\r\n                         hghf: TempXhigh[sss] * globalNormValu,\r\n                         cla: TempXclose[sss-5] * globalNormValu,\r\n                         clb: TempXclose[sss-4] * globalNormValu,\r\n                         clc: TempXclose[sss-3] * globalNormValu,\r\n                         cld: TempXclose[sss-2] * globalNormValu,\r\n                         cle: TempXclose[sss-1] * globalNormValu,\r\n                         clf: TempXclose[sss] * globalNormValu,\r\n                        });\r\n\r\n// THE CLOSE PRICE NEURAL NETWORK PREDICTION BRAIN #4\r\n                    const ClosePredictedResult = [];\r\n                    for (let i = 0; i < TempXclose.length; i++) {\r\n\r\n                      ClosePredictedResult.push({\r\n                        input: {\r\n                          opa: TempXopen[a] * globalNormValu,\r\n                          opb: TempXopen[b] * globalNormValu,\r\n                          opc: TempXopen[c] * globalNormValu,\r\n                          opd: TempXopen[d] * globalNormValu,\r\n                          ope: TempXopen[e] * globalNormValu,\r\n                          opf: TempXopen[f] * globalNormValu,\r\n                          hgha: TempXhigh[a] * globalNormValu,\r\n                          hghb: TempXhigh[b] * globalNormValu,\r\n                          hghc: TempXhigh[c] * globalNormValu,\r\n                          hghd: TempXhigh[d] * globalNormValu,\r\n                          hghe: TempXhigh[e] * globalNormValu, \r\n                          hghf: TempXhigh[f] * globalNormValu,\r\n                          lwa: TempXlow[a] * globalNormValu,\r\n                          lwb: TempXlow[b] * globalNormValu,\r\n                          lwc: TempXlow[c] * globalNormValu,\r\n                          lwd: TempXlow[d] * globalNormValu,\r\n                          lwe: TempXlow[e] * globalNormValu,\r\n                          lwf: TempXlow[f] * globalNormValu,\r\n                            },\r\n                      output: {\r\n                        cla: TempXclose[a] * globalNormValu,\r\n                        clb: TempXclose[b] * globalNormValu,\r\n                        clc: TempXclose[c] * globalNormValu,\r\n                        cld: TempXclose[d] * globalNormValu,\r\n                        cle: TempXclose[e] * globalNormValu,\r\n                        clf: TempXclose[f] * globalNormValu,\r\n                          }\r\n                      })\r\n                    }\r\n                   // console.log('BRAIN CLOSE PRICE TRAINING ARRAY : ', CenterCloseBrain)\r\n                    ClosePredictionBrain.train(ClosePredictedResult, {\r\n                        errorThresh: 0.05,\r\n                        log: false, \r\n                        learningRate: 0.29,\r\n                        momentum: momentum,\r\n                        hiddenLayers: [50], // array of ints for the sizes of the hidden layers in the network\r\n                        activation: 'leaky-relu', // supported activation types: ['sigmoid', 'relu', 'leaky-relu', 'tanh'],\r\n                        leakyReluAlpha: 0.01, // supported for activation type 'leaky-relu'\r\n                       });\r\n                       const BrainClosePrResult = ClosePredictionBrain.run({\r\n\r\n                        opa: TempXopen[sss-5] * globalNormValu,\r\n                        opb: TempXopen[sss-4] * globalNormValu,\r\n                        opc: TempXopen[sss-3] * globalNormValu,\r\n                        opd: TempXopen[sss-2] * globalNormValu,\r\n                        ope: TempXopen[sss-1] * globalNormValu,\r\n                        opf: TempXopen[sss] * globalNormValu,\r\n                         hgha: TempXhigh[sss-5] * globalNormValu,\r\n                         hghb: TempXhigh[sss-4] * globalNormValu,\r\n                         hghc: TempXhigh[sss-3] * globalNormValu,\r\n                         hghd: TempXhigh[sss-2] * globalNormValu,\r\n                         hghe: TempXhigh[sss-1] * globalNormValu,\r\n                         hghf: TempXhigh[sss] * globalNormValu,\r\n                         lwa: TempXlow[sss-5] * globalNormValu,\r\n                         lwb: TempXlow[sss-4] * globalNormValu,\r\n                         lwc: TempXlow[sss-3] * globalNormValu,\r\n                         lwd: TempXlow[sss-2] * globalNormValu,\r\n                         lwe: TempXlow[sss-1] * globalNormValu,\r\n                         lwf: TempXlow[sss] * globalNormValu,\r\n                        });\r\n\r\n////////////////////////////////******//END OF THE FEED FORWARD NEURAL NETWORK LAYER @1.0.0 //*********\r\n\r\n/*======================================================================*/\r\n/////////////////////// THE FOUR MAIN PREDICTION RESULT HERE*******\r\nOpenBrainResulta.push(BrainOpenPrResult.opa / globalNormValu);\r\nHighBrainResulta.push(BrainHighPrResult.hgha / globalNormValu);\r\nLowBrainResulta.push(BrainLowPrResult.lwa / globalNormValu);\r\nCloseBrainResulta.push(BrainClosePrResult.cla / globalNormValu);\r\n\r\nOpenBrainResultb.push(BrainOpenPrResult.opb / globalNormValu);\r\nHighBrainResultb.push(BrainHighPrResult.hghb / globalNormValu);\r\nLowBrainResultb.push(BrainLowPrResult.lwb / globalNormValu);\r\nCloseBrainResultb.push(BrainClosePrResult.clb / globalNormValu);\r\n\r\nOpenBrainResultc.push(BrainOpenPrResult.opc / globalNormValu);\r\nHighBrainResultc.push(BrainHighPrResult.hghc / globalNormValu);\r\nLowBrainResultc.push(BrainLowPrResult.lwc / globalNormValu);\r\nCloseBrainResultc.push(BrainClosePrResult.clc / globalNormValu);\r\n\r\nOpenBrainResultd.push(BrainOpenPrResult.opd / globalNormValu);\r\nHighBrainResultd.push(BrainHighPrResult.hghd / globalNormValu);\r\nLowBrainResultd.push(BrainLowPrResult.lwd / globalNormValu);\r\nCloseBrainResultd.push(BrainClosePrResult.cld / globalNormValu);\r\n\r\nOpenBrainResulte.push(BrainOpenPrResult.ope / globalNormValu);\r\nHighBrainResulte.push(BrainHighPrResult.hghe / globalNormValu);\r\nLowBrainResulte.push(BrainLowPrResult.lwe / globalNormValu);\r\nCloseBrainResulte.push(BrainClosePrResult.cle / globalNormValu);\r\n\r\nOpenBrainResultf.push(BrainOpenPrResult.opf / globalNormValu);\r\nHighBrainResultf.push(BrainHighPrResult.hghf / globalNormValu);\r\nLowBrainResultf.push(BrainLowPrResult.lwf / globalNormValu);\r\nCloseBrainResultf.push(BrainClosePrResult.clf / globalNormValu);\r\n  //console.log('OPEN BRAIN, HIGH BRAIN LOW BRAIN CLOSE BRAIN OHLC RESULT: ', OpenBrainResulta, HighBrainResult, LowBrainResult, CloseBrainResult)\r\n  \r\n////PREP PRICES FOR PREDICTION CHART TO FETCH ONLY THE LATESS PRICE AND DO SOME TASKS...\r\n////EPOX NUMBER TASK\r\nconst epoxResult =[];\r\nconst openResult =[];\r\nconst highResult =[];\r\nconst lowResult =[];\r\nconst closeResult =[];\r\n\r\nfor(let i = 0; i < OpenBrainResultf.length; i++)\r\n{   \r\n  var ppp = 0;\r\n // if(i>0){ppp = 499 + i - 1}else{ppp = 499 + i}\r\n  if(i < 1) {ppp = 499}\r\n  if(i === 1){ppp = 500}\r\n  if(i > 1){ppp = i + 499}\r\n  epoxResult.push(TempCHepoxNum[ppp]);     \r\n\r\n  openResult.push(TempCHXopen[ppp]);     \r\n\r\n  highResult.push(TempCHXhigh[ppp]);     \r\n\r\n  lowResult.push(TempCHXlow[ppp]);      \r\n\r\n  closeResult.push(TempCHXclose[ppp]);      \r\n}\r\n//console.log(\"Epox Number: \", epoxResult, 'OPEN R: ', openResult, 'HIGH R: ', highResult, 'LOW R: ', lowResult, 'CLOSE R: ', closeResult);\r\n\r\n////OPEN BRAIN RESULT TASK\r\n  const openBrainResult =[];\r\n\r\nfor(let i = 0; i < OpenBrainResultf.length ; i++) \r\n{\r\n  var jjj = 0;\r\n  if(i<0){jjj = i - 1}else{jjj = i}\r\n  openBrainResult.push(OpenBrainResultf[jjj])    \r\n}\r\n  //console.log(\"OPEN PREDICTED; \", openBrainResult);\r\n\r\n////PREPAIR AVERAGE BETWEEN THE OPEN LATESS PRICE AND THE OPEN PREDICTED\r\n  const AvgElem1OpenOpen = [];\r\n  const Elem1 = [];\r\nfor(let i = 0; i < OpenBrainResultf.length; i++) {\r\n  var elemOf1 = 0;\r\n  if(i > 0){elemOf1 = i - 1}else{elemOf1 = i}\r\n//console.log(elemOf1);\r\n  let elemOf1B = openBrainResult[elemOf1] * globalNormValu;\r\n//console.log('PREDICTED OPEN: ', elemOf1B);\r\n  let elemOf1C = openResult[elemOf1] * globalNormValu;\r\n//console.log('OPEN MARKET PRICE: ', elemOf1C);\r\n       Elem1.push([(elemOf1C + elemOf1B) * 0.000005] / 0.0000000001); // must hand boum it lol for now! it's a simple average but has lots of depth \r\n        AvgElem1OpenOpen.push(Elem1);\r\nif(AvgElem1OpenOpen.length <= i) {AvgElem1OpenOpen.push(Elem1[i])}else{}\r\n}\r\n//console.log('CHECKING IF I HAND BOUM IT CORRECTLY must be near the price of asset using: ', Elem1);\r\n\r\n//console.log(AvgElem1OpenOpen);\r\n\r\n\r\n////HIGH BRAIN RESULT TASK\r\n  const highBrainResult = [];\r\n\r\n  \r\n  for(let i = 0; i < HighBrainResultf.length; i++) \r\n  {\r\n    var kkk = 0;\r\n    if(i<0){kkk = i - 1}else{kkk = i}\r\n    highBrainResult.push(HighBrainResultf[kkk])\r\n  }\r\n  //console.log(\"HIGH PREDICTED : \", highBrainResult);\r\n\r\n      ////PREPAIR AVERAGE BETWEEN THE HIGH LATESS PRICE AND THE HIGH PREDICTED PRICE\r\nconst AvgElem2HighHigh = [];\r\nconst Elem2 = [];\r\nfor(let i = 0; i < HighBrainResultf.length; i++) {\r\nvar elemOf2 = 0;\r\nif(i > 0){elemOf2 = i - 1}else{elemOf2 = i}\r\nlet elemOf2B = highBrainResult[elemOf2] * globalNormValu;\r\n//console.log('PREDICTED HIGH : ', elemOf2B);\r\nlet elemOf2C = highResult[elemOf2] * globalNormValu;\r\n//console.log('HIGH MARKET PRICE: ', elemOf2C);\r\nElem2.push([(elemOf2C + elemOf2B) * 0.000005] / 0.0000000001);\r\nAvgElem2HighHigh.push(Elem2);\r\nif(AvgElem2HighHigh.length <= i) {AvgElem2HighHigh.push(Elem2[i])}else{}\r\n}\r\n//console.log(Elem2);\r\n//console.log(AvgElem2HighHigh);\r\n\r\n////LOW BRAIN RESULT TASK \r\n  const lowBrainResult = [];\r\n  \r\n  for(let i = 0; i < LowBrainResultf.length; i++) \r\n  {\r\n    var hhh = 0;\r\n    if(i<0){hhh = i - 1}else{hhh = i};\r\n    lowBrainResult.push(LowBrainResultf[hhh]) \r\n  }\r\n  //console.log(\"LOW PREDICTED : \", lowBrainResult);\r\n  \r\n\r\n////PREPAIR AVERAGE BETWEEN THE LOW LATESS PRICE AND THE LOW PREDICTED PRICE\r\nconst AvgElem3LowLow = [];\r\nconst Elem3 = [];\r\nfor(let i = 0; i < LowBrainResultf.length; i++) {\r\nvar elemOf3 = 0;\r\nif(i > 0){elemOf3 = i - 1}else{elemOf3 = i}\r\n//console.log(elemOf3);\r\nlet elemOf3B = lowBrainResult[elemOf3] * globalNormValu;\r\n//console.log('PREDICTED LOW: ', elemOf3B);\r\nlet elemOf3C = lowResult[elemOf3] * globalNormValu;\r\n//console.log('LOW MARKET PRICE: ', elemOf3C);\r\nElem3.push([(elemOf3C + elemOf3B) * 0.000005] / 0.0000000001);\r\nAvgElem3LowLow.push(Elem3);\r\nif(AvgElem3LowLow.length <= i) {AvgElem3LowLow.push(Elem2[i])}else{}\r\n};\r\n//console.log(Elem3);\r\n//console.log(AvgElem3LowLow);\r\n\r\n////CLOSE BRAIN RESULT TASK\r\n  const closeBrainResult = [];\r\n\r\n  for(let i = 0; i < CloseBrainResultf.length; i++) \r\n  {\r\n    var ggg = 0;\r\n    if(i<0){ggg =i - 1}else{ggg = i}\r\n    closeBrainResult.push(CloseBrainResultf[ggg])\r\n  }\r\n  //console.log(\"CLOSE PREDICTED : \", closeBrainResult);\r\n\r\n////PREPAIR AVERAGE BETWEEN CLOSE LATESS PRICE AND THE CLOSE PREDICTED PRICE\r\nconst AvgElem4CloseClose = [];\r\nconst Elem4 = [];\r\n\r\nfor(let i = 0; i < closeBrainResult.length; i++) {\r\nvar elemOf4 = 0;\r\nif(i > 0){elemOf4 = i - 1}else{elemOf4 = i}\r\nlet elemOf4B = closeBrainResult[elemOf4] * globalNormValu;\r\n//console.log('PREDICTED CLOSE: ', elemOf4B);\r\nlet elemOf4C = closeResult[elemOf4] * globalNormValu;\r\n\r\n//console.log('CLOSE MARKET PRICE: ', elemOf4C);\r\nElem4.push([(elemOf4B + elemOf4C) * 0.000005] / 0.0000000001);\r\nAvgElem4CloseClose.push(Elem4);\r\nif(AvgElem4CloseClose.length <= i) {AvgElem4CloseClose.push(Elem4[i])}else{}\r\n}\r\n//console.log(Elem4);\r\n//console.log(AvgElem4CloseClose);\r\n\r\n\r\n\r\n\r\n//console.log(\"Incomming Latess Price : \", OpenPrice)\r\n//console.log(\"Incomming Array Length : \", DataLength)\r\n//console.log(\"ILP: \",opVSI)\r\n\r\n\r\n//console.log(masterXopen[valueX] - OpenBrainResulta[0])\r\n //const OpenPredicted = [];\r\n\r\n const LowPredicted = [LowBrainResultf[positionOfArray - 1] - LowPrice[positionOfArray - 1]];\r\n const RealLow = [LowPrice[positionOfArray - 1] - LowBrainResultf[positionOfArray - 1]];\r\n\r\n const HghPredicted = [HighBrainResultf[positionOfArray - 1] - HighPrice[positionOfArray - 1]]\r\n const RealHigh = [HighPrice[positionOfArray - 1] - HighBrainResultf[positionOfArray - 1]];\r\n\r\n const ClsPredicted = [CloseBrainResultf[positionOfArray - 1] - ClosePrice[positionOfArray - 1]];\r\n const RealClose = [ClosePrice[positionOfArray - 1] - CloseBrainResultf[positionOfArray - 1]];\r\n\r\n const RvsPredicted = [ThePrice[positionOfArray - 1] - OpenBrainResulta[positionOfArray - 1]];\r\n //const PvsReal = [OpenBrainResult[0] - FinalPriceArray];\r\n\r\n ///\r\n /*AVERAGE OF THE 4 PREDICTED BRAIN RESULT AND THE THE 4 ELEMENTS WICH IS THE AVERAGE OF LATESS AND PREDICTED \r\n ALWAY'S SAME STRUCTURE: OPEN LATESS WITH OPEN PREDICTED IS ELEM 1\r\n                         HIGH LATESS WITH HIGH PREDICTED IS ELEM 2\r\n                         LOW LATESS WITH LOW PREDICTED IS ELEM 3\r\n                         CLOSE LATESS WITH CLOSE PREDICTED IS ELEM 4 \r\n */\r\n const MASTERCORE = [];\r\n //console.log('************:', openResult, ' and :', highResult, 'and :', lowResult, 'and:', closeResult)\r\n for(let i = 0; i < highBrainResult.length; i++) \r\n {\r\n   var lll = 0;\r\n   if(i < 0){lll = i - 1}else{lll = i};\r\n   var I = HighBrainResultf[lll] * globalNormValu;\r\n   var II = OpenBrainResultf[lll] * globalNormValu;\r\n   var III = CloseBrainResultf[lll] * globalNormValu;\r\n   var IV = LowBrainResultf[lll] * globalNormValu;\r\n   var V = Elem1[lll] * globalNormValu;\r\n   var VI = Elem2[lll] * globalNormValu;\r\n   var VII = Elem3[lll] * globalNormValu;\r\n   var VIII = Elem4[lll] * globalNormValu;\r\n   var IX = openResult[lll] * globalNormValu;\r\n   var X = highResult[lll] * globalNormValu;\r\n   var XI = lowResult[lll] * globalNormValu;\r\n   var XII = closeResult[lll] * globalNormValu; \r\n\r\n    MASTERCORE.push((((I + II + III + IV + V + VI + VII + VIII + IX + X + XI + XII) / globalNormValu) / 12))\r\n   // console.log('************:', Elem1[lll], ' and :', Elem2[lll], 'and :', Elem3[lll], 'and:', Elem4[lll])\r\n  }\r\n // console.log(\"midleLine: \",midOP)\r\n\r\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\nconst latessOPvs8Lines = [];\r\nconst predictedOPvs8Lines = [];\r\nconst subLatessOPvsPredicted = [];\r\nconst myAvgOPBoxFinalResult = [];\r\nconst myAvgOPBoxFinalResultB = [];\r\nconst myAvgOPBoxFinalResultI = [];\r\nconst myAvgOPBoxFinalResultIB = [];\r\n\r\n//console.log(myAvgBoxFinalResultB)\r\n//console.log('ARRAY TEST-------predicted---vs---subLatess---: ', predictedCloseVS8Lines, '<:>', subLatessClVSPredicted)\r\n\r\nconst myAvgOPBoxI = [];\r\nconst myAvgOPBoxResultI = [];\r\nfor(let i = 0; i < OpenBrainResultf.length; i++){\r\n  var oooo = 0;\r\n  if(i<0){oooo = i - 1}else{oooo = i};\r\n  let ddso = MASTERCORE[oooo] * 0.00001;\r\n  let ssdo = OpenBrainResultf[oooo] * 0.00001;\r\n\r\n  predictedOPvs8Lines.push(((ddso + ssdo)  / 0.00001) / 2);\r\n  myAvgOPBoxI.push(predictedOPvs8Lines[i]); //collect result in this box...\r\n  myAvgOPBoxResultI.push(myAvgOPBoxI.reduce(function (sum, value) {\r\n    return sum + value;\r\n}, 0) / myAvgOPBoxI.length);\r\nlet sddso = myAvgOPBoxResultI[oooo] * 0.00001;\r\nmyAvgOPBoxFinalResultI.push(((ddso + sddso)  / 0.00001) / 2);\r\nmyAvgOPBoxFinalResultIB.push(((ssdo + sddso)  / 0.00001) / 2);\r\n\r\n  //console.log(predictedCloseVS8Lines[i]);\r\n  //console.log('added ooo******', ((dds + ssd)  / 0.00001) / 2);\r\n}\r\nconst myAvgOPBox = [];\r\nconst myAvgOPBoxResult = [];\r\n\r\nfor(let i = 0; i < OpenBrainResultf.length; i++){\r\n  var arrayPos = 0;\r\n  if(i<0){arrayPos = i - 1}else{arrayPos = i};\r\n\r\n  let coreO = MASTERCORE[arrayPos] * 0.00001;\r\n  let openRlt = openResult[arrayPos] * 0.00001;\r\n\r\n  latessOPvs8Lines.push(((coreO + openRlt)  / 0.00001) / 2);\r\n  myAvgOPBox.push(latessOPvs8Lines[i]);\r\n\r\n  myAvgOPBoxResult.push(myAvgOPBox.reduce(function (sum, value) {\r\n    return sum + value;\r\n}, 0) / myAvgOPBox.length);\r\n  let AccAvg = myAvgOPBoxResult[arrayPos] * 0.00001;\r\n  myAvgOPBoxFinalResult.push(((coreO + AccAvg)  / 0.00001) / 2);\r\n  myAvgOPBoxFinalResultB.push(((openRlt + AccAvg)  / 0.00001) / 2);\r\n \r\n // console.log('added opo******', ((sds + dsd)  / 0.00001) / 2);\r\n}\r\n\r\n//console.log(latessCloseVS8Lines, '******VS*****', predictedCloseVS8Lines);\r\n\r\n\r\n/* \r\n  if(i < 1) {ppp = 499}\r\n  if(i === 1){ppp = 500}\r\n  if(i > 1){ppp = i + 499}\r\n*/\r\n\r\nfor(let i = 0; i < latessOPvs8Lines.length; i++){\r\n  var mmmo = 0;\r\n  if(i < 1) {mmmo = 0}\r\n  if(i === 1){mmmo = 1}\r\n  if(i > 1){mmmo = i }\r\n  let mnmo = latessOPvs8Lines[mmmo];\r\n  let nmno = predictedOPvs8Lines[mmmo]\r\n  subLatessOPvsPredicted.push(mnmo - nmno)\r\n\r\n  //console.log('SHOULD FLUTUATE VERY NEAR THE ZERO LINE (creating a wave)', subLatessClVSPredicted)\r\n}\r\n\r\n\r\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\nconst latessHGHvs8Lines = [];\r\nconst predictedHGHvs8Lines = [];\r\nconst subLatessHGHvsPredicted = [];\r\nconst myAvgHGHBoxFinalResult = [];\r\nconst myAvgHGHBoxFinalResultB = [];\r\nconst myAvgHGHBoxFinalResultI = [];\r\nconst myAvgHGHBoxFinalResultIB = [];\r\n\r\n//console.log(myAvgBoxFinalResultB)\r\n//console.log('ARRAY TEST-------predicted---vs---subLatess---: ', predictedCloseVS8Lines, '<:>', subLatessClVSPredicted)\r\n\r\nconst myAvgHGHBoxI = [];\r\nconst myAvgHGHBoxResultI = [];\r\nfor(let i = 0; i < HighBrainResultf.length; i++){\r\n  var oooh = 0;\r\n  if(i<0){oooh = i - 1}else{oooh = i};\r\n  let ddsh = MASTERCORE[oooh] * 0.00001;\r\n  let ssdh = HighBrainResultf[oooh] * 0.00001;\r\n\r\n  predictedHGHvs8Lines.push(((ddsh + ssdh)  / 0.00001) / 2);\r\n  myAvgHGHBoxI.push(predictedHGHvs8Lines[i]);\r\n  myAvgHGHBoxResultI.push(myAvgHGHBoxI.reduce(function (sum, value) {\r\n    return sum + value;\r\n}, 0) / myAvgHGHBoxI.length);\r\nlet sddsh = myAvgHGHBoxResultI[oooh] * 0.00001;\r\nmyAvgHGHBoxFinalResultI.push(((ddsh + sddsh)  / 0.00001) / 2);\r\nmyAvgHGHBoxFinalResultIB.push(((ssdh + sddsh)  / 0.00001) / 2);\r\n\r\n  //console.log(predictedCloseVS8Lines[i]);\r\n  //console.log('added ooo******', ((dds + ssd)  / 0.00001) / 2);\r\n}\r\nconst myAvgHGHBox = [];\r\nconst myAvgHGHBoxResult = [];\r\nfor(let i = 0; i < HighBrainResultf.length; i++){\r\n  var oporr = 0;\r\n  if(i<0){oporr = i - 1}else{oporr = i};\r\n  let sdssh = MASTERCORE[oporr] * 0.00001;\r\n  let dsddh = highResult[oporr] * 0.00001;\r\n  latessHGHvs8Lines.push(((sdssh + dsddh)  / 0.00001) / 2);\r\n  myAvgHGHBox.push(latessHGHvs8Lines[i]);\r\n  myAvgHGHBoxResult.push(myAvgHGHBox.reduce(function (sum, value) {\r\n    return sum + value;\r\n}, 0) / myAvgHGHBox.length);\r\n  let dssdh = myAvgHGHBoxResult[oporr] * 0.00001;\r\n  myAvgHGHBoxFinalResult.push(((sdssh + dssdh)  / 0.00001) / 2);\r\n  myAvgHGHBoxFinalResultB.push(((dsddh + dssdh)  / 0.00001) / 2);\r\n \r\n // console.log('added opo******', ((sds + dsd)  / 0.00001) / 2);\r\n}\r\n\r\n//console.log(latessCloseVS8Lines, '******VS*****', predictedCloseVS8Lines);\r\n\r\n\r\n/* \r\n  if(i < 1) {ppp = 499}\r\n  if(i === 1){ppp = 500}\r\n  if(i > 1){ppp = i + 499}\r\n*/\r\n\r\nfor(let i = 0; i < latessHGHvs8Lines.length; i++){\r\n  var mmmh = 0;\r\n  if(i < 1) {mmmh = 0}\r\n  if(i === 1){mmmh = 1}\r\n  if(i > 1){mmmh = i }\r\n  let mnmh = latessHGHvs8Lines[mmmh];\r\n  let nmnh = predictedHGHvs8Lines[mmmh]\r\n  subLatessHGHvsPredicted.push(mnmh - nmnh)\r\n\r\n  //console.log('SHOULD FLUTUATE VERY NEAR THE ZERO LINE (creating a wave)', subLatessClVSPredicted)\r\n}\r\n\r\n\r\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\nconst latessLWvs8Lines = [];\r\nconst predictedLWvs8Lines = [];\r\nconst subLatessLWvsPredicted = [];\r\nconst myAvgLWBoxFinalResult = [];\r\nconst myAvgLWBoxFinalResultB = [];\r\nconst myAvgLWBoxFinalResultI = [];\r\nconst myAvgLWBoxFinalResultIB = [];\r\n\r\n//console.log(myAvgBoxFinalResultB)\r\n//console.log('ARRAY TEST-------predicted---vs---subLatess---: ', predictedCloseVS8Lines, '<:>', subLatessClVSPredicted)\r\n\r\nconst myAvgLWBoxI = [];\r\nconst myAvgLWBoxResultI = [];\r\nfor(let i = 0; i < LowBrainResultf.length; i++){\r\n  var oool = 0;\r\n  if(i<0){oool = i - 1}else{oool = i};\r\n  let dds = MASTERCORE[oool] * 0.00001;\r\n  let ssd = LowBrainResultf[oool] * 0.00001;\r\n\r\n  predictedLWvs8Lines.push(((dds + ssd)  / 0.00001) / 2);\r\n  myAvgLWBoxI.push(predictedLWvs8Lines[i]);\r\n  myAvgLWBoxResultI.push(myAvgLWBoxI.reduce(function (sum, value) {\r\n    return sum + value;\r\n}, 0) / myAvgLWBoxI.length);\r\nlet sdds = myAvgLWBoxResultI[oool] * 0.00001;\r\nmyAvgLWBoxFinalResultI.push(((dds + sdds)  / 0.00001) / 2);\r\nmyAvgLWBoxFinalResultIB.push(((ssd + sdds)  / 0.00001) / 2);\r\n\r\n  //console.log(predictedCloseVS8Lines[i]);\r\n  //console.log('added ooo******', ((dds + ssd)  / 0.00001) / 2);\r\n}\r\nconst myAvgLWBox = [];\r\nconst myAvgLWBoxResult = [];\r\nfor(let i = 0; i < LowBrainResultf.length; i++){\r\n  var opor = 0;\r\n  if(i<0){opor = i - 1}else{opor = i};\r\n  let sdss = MASTERCORE[opor] * 0.00001;\r\n  let dsdd = lowResult[opor] * 0.00001;\r\n  latessLWvs8Lines.push(((sdss + dsdd)  / 0.00001) / 2);\r\n  myAvgLWBox.push(latessLWvs8Lines[i]);\r\n  myAvgLWBoxResult.push(myAvgLWBox.reduce(function (sum, value) {\r\n    return sum + value;\r\n}, 0) / myAvgLWBox.length);\r\n  let dssd = myAvgLWBoxResult[opor] * 0.00001;\r\n  myAvgLWBoxFinalResult.push(((sdss + dssd)  / 0.00001) / 2);\r\n  myAvgLWBoxFinalResultB.push(((dsdd + dssd)  / 0.00001) / 2);\r\n \r\n // console.log('added opo******', ((sds + dsd)  / 0.00001) / 2);\r\n}\r\n\r\n//console.log(latessCloseVS8Lines, '******VS*****', predictedCloseVS8Lines);\r\n\r\n\r\n/* \r\n  if(i < 1) {ppp = 499}\r\n  if(i === 1){ppp = 500}\r\n  if(i > 1){ppp = i + 499}\r\n*/\r\n\r\nfor(let i = 0; i < latessLWvs8Lines.length; i++){\r\n  var mmmr = 0;\r\n  if(i < 1) {mmmr = 0}\r\n  if(i === 1){mmmr = 1}\r\n  if(i > 1){mmmr = i }\r\n  let mnm = latessLWvs8Lines[mmmr];\r\n  let nmn = predictedLWvs8Lines[mmmr]\r\n  subLatessLWvsPredicted.push(mnm - nmn)\r\n\r\n  //console.log('SHOULD FLUTUATE VERY NEAR THE ZERO LINE (creating a wave)', subLatessClVSPredicted)\r\n}\r\n\r\n\r\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\nconst latessCLVS8Lines = [];\r\nconst predictedCLVS8Lines = [];\r\nconst subLatessCLVSPredicted = [];\r\nconst myAvgCLBoxFinalResult = [];\r\nconst myAvgCLBoxFinalResultB = [];\r\nconst myAvgCLBoxFinalResultI = [];\r\nconst myAvgCLBoxFinalResultIB = [];\r\n\r\n//console.log(myAvgBoxFinalResultB)\r\n//console.log('ARRAY TEST-------predicted---vs---subLatess---: ', predictedCloseVS8Lines, '<:>', subLatessClVSPredicted)\r\n\r\nconst myAvgBoxI = [];\r\nconst myAvgBoxResultI = [];\r\nfor(let i = 0; i < CloseBrainResultf.length; i++){\r\n  var ooo = 0;\r\n  if(i<0){ooo = i - 1}else{ooo = i};\r\n  let dds = MASTERCORE[ooo] * 0.00001;\r\n  let ssd = CloseBrainResultf[ooo] * 0.00001;\r\n\r\n  predictedCLVS8Lines.push(((dds + ssd)  / 0.00001) / 2);\r\n  myAvgBoxI.push(predictedCLVS8Lines[i]);\r\n  myAvgBoxResultI.push(myAvgBoxI.reduce(function (sum, value) {\r\n    return sum + value;\r\n}, 0) / myAvgBoxI.length);\r\nlet sdds = myAvgBoxResultI[ooo] * 0.00001;\r\nmyAvgCLBoxFinalResultI.push(((dds + sdds)  / 0.00001) / 2);\r\nmyAvgCLBoxFinalResultIB.push(((ssd + sdds)  / 0.00001) / 2);\r\n\r\n  //console.log(predictedCloseVS8Lines[i]);\r\n  //console.log('added ooo******', ((dds + ssd)  / 0.00001) / 2);\r\n}\r\nconst myAvgBox = [];\r\nconst myAvgBoxResult = [];\r\nfor(let i = 0; i < CloseBrainResultf.length; i++){\r\n  var opo = 0;\r\n  if(i<0){opo = i - 1}else{opo = i};\r\n  let sds = MASTERCORE[opo] * 0.00001;\r\n  let dsd = closeResult[opo] * 0.00001;\r\n  latessCLVS8Lines.push(((sds + dsd)  / 0.00001) / 2);\r\n  myAvgBox.push(latessCLVS8Lines[i]);\r\n  myAvgBoxResult.push(myAvgBox.reduce(function (sum, value) {\r\n    return sum + value;\r\n}, 0) / myAvgBox.length);\r\n  let dssd = myAvgBoxResult[opo] * 0.00001;\r\n  myAvgCLBoxFinalResult.push(((sds + dssd)  / 0.00001) / 2);\r\n  myAvgCLBoxFinalResultB.push(((dsd + dssd)  / 0.00001) / 2);\r\n \r\n // console.log('added opo******', ((sds + dsd)  / 0.00001) / 2);\r\n}\r\n\r\n//console.log(latessCloseVS8Lines, '******VS*****', predictedCloseVS8Lines);\r\n\r\n\r\n/* \r\n  if(i < 1) {ppp = 499}\r\n  if(i === 1){ppp = 500}\r\n  if(i > 1){ppp = i + 499}\r\n*/\r\n\r\nfor(let i = 0; i < latessCLVS8Lines.length; i++){\r\n  var mmm = 0;\r\n  if(i < 1) {mmm = 0}\r\n  if(i === 1){mmm = 1}\r\n  if(i > 1){mmm = i }\r\n  let mnm = latessCLVS8Lines[mmm];\r\n  let nmn = predictedCLVS8Lines[mmm]\r\n  subLatessCLVSPredicted.push(mnm - nmn)\r\n\r\n  //console.log('SHOULD FLUTUATE VERY NEAR THE ZERO LINE (creating a wave)', subLatessClVSPredicted)\r\n}\r\n\r\n\r\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n///////////////////////////////////////////////////////////////////////******BEGINNING OF LAYER TWO NEURAL NETWORK*** */\r\n// LAYER TWO  NETWORK PREDICTION BRAIN #1 OF #4  LayerIIOpenResult\r\nconst LayerIIOpenBrain = [];\r\nfor (let i = 0; i < OpenBrainResulta.length; i++) {\r\n\r\n  LayerIIOpenBrain.push({\r\n  input: {\r\n\r\n       avergl: MASTERCORE[i] * globalNormValu,\r\n          elm2: Elem2[i] * globalNormValu,\r\n          elm3: Elem3[i] * globalNormValu,\r\n          elm4: Elem4[i] * globalNormValu,\r\n          obr: openBrainResult[i] * globalNormValu,\r\n          hbr: highBrainResult[i] * globalNormValu,\r\n          lbr: lowBrainResult[i] * globalNormValu,\r\n          cbr: closeBrainResult[i] * globalNormValu,\r\n          hp: TempCHXopen[i] * globalNormValu,\r\n          lp: TempCHXopen[i] * globalNormValu,\r\n          cp: TempCHXopen[i] * globalNormValu,\r\n  },\r\n  output: {\r\n         op: TempCHXopen[i] * globalNormValu,\r\n         elm1: Elem1[i] * globalNormValu,\r\n         \r\n    }\r\n  })\r\n}\r\n//console.log('LAYER TWO TARGET PRICE **OPEN** TRAINING ARRAY : ', LayerIIOpenBrain)\r\nOpenReAquiredTarget.train(LayerIIOpenBrain, {\r\n    errorThresh: 0.005,\r\n    log: false, \r\n    learningRate: 0.29,\r\n    momentum: momentum,\r\n    hiddenLayers: [10], // array of ints for the sizes of the hidden layers in the network\r\n    activation: 'leaky-relu', // supported activation types: ['sigmoid', 'relu', 'leaky-relu', 'tanh'],\r\n    leakyReluAlpha: 0.01, // supported for activation type 'leaky-relu'\r\n   });\r\n   let el = Elem1.length-1\r\n   //console.log(el)\r\n   const LayerIIOPBrainResult = OpenReAquiredTarget.run(\r\n     {\r\n       avergl: MASTERCORE[el] * globalNormValu,\r\n          elm2: Elem2[el] * globalNormValu,\r\n          elm3: Elem3[el] * globalNormValu,\r\n          elm4: Elem4[el] * globalNormValu,\r\n          obr: openBrainResult[el] * globalNormValu,\r\n          hbr: highBrainResult[el] * globalNormValu,\r\n          lbr: lowBrainResult[el] * globalNormValu,\r\n          cbr: closeBrainResult[el] * globalNormValu,\r\n          hp: TempCHXopen[el] * globalNormValu,\r\n          lp: TempCHXopen[el] * globalNormValu,\r\n          cp: TempCHXopen[el] * globalNormValu,\r\n    });\r\n  \r\n    LayerIIOpenResult.push(LayerIIOPBrainResult.op / globalNormValu);\r\n    LayerIIOpenResultElem1.push(LayerIIOPBrainResult.elm1 / globalNormValu);\r\n    //console.log('*******************', LayerIIOPBrainResult.op / globalNormValu, '*********');\r\n\r\n//////////////////////////////////////////////////////////////////////////////////////////\r\n// LAYER TWO  NETWORK PREDICTION BRAIN #2 OF #4  LayerIIHighResult\r\nconst LayerIIHighBrainPrice = [];\r\nfor (let i = 0; i < OpenBrainResulta.length; i++) {\r\n\r\n  LayerIIHighBrainPrice.push({\r\n  input: {\r\n        avergl: MASTERCORE[i] * globalNormValu,\r\n          elm1: Elem1[i] * globalNormValu,\r\n          elm3: Elem3[i] * globalNormValu,\r\n          elm4: Elem4[i] * globalNormValu,\r\n           obr: openBrainResult[i] * globalNormValu,\r\n           hbr: highBrainResult[i] * globalNormValu,\r\n           lbr: lowBrainResult[i] * globalNormValu,\r\n           cbr: closeBrainResult[i] * globalNormValu,\r\n           op: TempCHXhigh[i] * globalNormValu,\r\n           lp: TempCHXhigh[i] * globalNormValu,\r\n           cp: TempCHXhigh[i] * globalNormValu,\r\n  },\r\n  output: {\r\n \r\n    hp: TempCHXhigh[i] * globalNormValu,\r\n    elm2: Elem2[i] * globalNormValu,\r\n         \r\n    }\r\n  })\r\n}\r\n//console.log('LAYER TWO TARGET PRICE **HIGH** TRAINING ARRAY : ', LayerIIHighBrainPrice)\r\nOpenReAquiredTargetHG.train(LayerIIHighBrainPrice, {\r\n    errorThresh: 0.005,\r\n    log: false, \r\n    learningRate: 0.29,\r\n    momentum: momentum,\r\n    hiddenLayers: [10], // array of ints for the sizes of the hidden layers in the network\r\n    activation: 'leaky-relu', // supported activation types: ['sigmoid', 'relu', 'leaky-relu', 'tanh'],\r\n    leakyReluAlpha: 0.01, // supported for activation type 'leaky-relu'\r\n   });\r\n   //let e = Elem1.length-1\r\n   //console.log(el)\r\n   const LayerIIHGBrainResult = OpenReAquiredTargetHG.run(\r\n     {\r\n       avergl: MASTERCORE[el] * globalNormValu,\r\n         elm1: Elem1[el] * globalNormValu,\r\n         elm3: Elem3[el] * globalNormValu,\r\n         elm4: Elem4[el] * globalNormValu,\r\n          obr: openBrainResult[el] * globalNormValu,\r\n          hbr: highBrainResult[el] * globalNormValu,\r\n          lbr: lowBrainResult[el] * globalNormValu,\r\n          cbr: closeBrainResult[el] * globalNormValu,\r\n          op: TempCHXhigh[el] * globalNormValu,\r\n          lp: TempCHXhigh[el] * globalNormValu,\r\n          cp: TempCHXhigh[el] * globalNormValu,\r\n    });\r\n\r\n    LayerIIHighResult.push(LayerIIHGBrainResult.hp / globalNormValu);\r\n    LayerIIHighResultElem2.push(LayerIIHGBrainResult.elm2 / globalNormValu);\r\n    //console.log(' LAYER TWO HIGH RESULT: ', LayerIIHGBrainResult.hp, ' LAYER TWO ELEMs HIGH RESULT: ', LayerIIHighResultElem2)\r\n\r\n//////////////////////////////////////////////////////////////////////////////////\r\n// LAYER TWO  NETWORK PREDICTION BRAIN #3 OF #4  LayerIILowResult\r\nconst LayerIILowBrainPrice = [];\r\nfor (let i = 0; i < OpenBrainResulta.length; i++) {\r\n\r\n  LayerIILowBrainPrice.push({\r\n  input: {\r\n       avergl: MASTERCORE[i] * globalNormValu,\r\n\r\n          elm1: Elem1[i] * globalNormValu,\r\n          elm2: Elem2[i] * globalNormValu,\r\n          elm4: Elem4[i] * globalNormValu,\r\n          obr: openBrainResult[i] * globalNormValu,\r\n          hbr: highBrainResult[i] * globalNormValu,\r\n          lbr: lowBrainResult[i] *globalNormValu,\r\n          cbr: closeBrainResult[i] * globalNormValu,\r\n          op: TempCHXlow[i] * globalNormValu,\r\n          hp: TempCHXlow[i] * globalNormValu,\r\n          cp: TempCHXlow[i] * globalNormValu,\r\n  },\r\n  output: {\r\n\r\n    lp: TempCHXlow[i] * globalNormValu,\r\n    elm3: Elem3[i] * globalNormValu,\r\n         \r\n    }\r\n  })\r\n}\r\n//console.log('LAYER TWO TARGET PRICE **LOW** TRAINING ARRAY : ', LayerIILowBrainPrice)\r\nOpenReAquiredTargetLW.train(LayerIILowBrainPrice, {\r\n    errorThresh: 0.005,\r\n    log: false, \r\n    learningRate: 0.29,\r\n    momentum: momentum,\r\n    hiddenLayers: [10], // array of ints for the sizes of the hidden layers in the network\r\n    activation: 'leaky-relu', // supported activation types: ['sigmoid', 'relu', 'leaky-relu', 'tanh'],\r\n    leakyReluAlpha: 0.01, // supported for activation type 'leaky-relu'\r\n   });\r\n   //let e = Elem1.length-1\r\n   //console.log(el)\r\n   const LayerIILWBrainResult = OpenReAquiredTargetLW.run(\r\n     {\r\n        avergl: MASTERCORE[el] * globalNormValu,\r\n          elm1: Elem1[el] * globalNormValu,\r\n          elm2: Elem2[el] * globalNormValu,\r\n          elm4: Elem4[el] * globalNormValu,\r\n           obr: openBrainResult[el] * globalNormValu,\r\n           hbr: highBrainResult[el] * globalNormValu,\r\n           lbr: lowBrainResult[el] * globalNormValu,\r\n           cbr: closeBrainResult[el] * globalNormValu,\r\n           op: TempCHXlow[el] * globalNormValu,\r\n           hp: TempCHXlow[el] * globalNormValu,\r\n           cp: TempCHXlow[el] * globalNormValu,\r\n    });\r\n\r\n    LayerIILowResult.push(LayerIILWBrainResult.lp / globalNormValu);\r\n    LayerIILowResultElem3.push(LayerIILWBrainResult.elm3 / globalNormValu);\r\n    //console.log(' LAYER TWO LOW RESULT: ', LayerIILWBrainResult.lp, ' LAYER TWO ELEMs LOW RESULT: ', LayerIILowResultElem3);\r\n\r\n////////////////////////////////////////////////////////////////////\r\n// LAYER TWO  NETWORK PREDICTION BRAIN #2 OF #4  LayerIICloseResult\r\nconst LayerIICloseBrainPrice = [];\r\nfor (let i = 0; i < OpenBrainResulta.length; i++) {\r\n\r\n  LayerIICloseBrainPrice.push({\r\n  input: {\r\n       avergl: MASTERCORE[i] * globalNormValu,\r\n\r\n          elm1: Elem1[i] * globalNormValu,\r\n          elm2: Elem2[i] * globalNormValu,\r\n          elm3: Elem3[i] * globalNormValu,\r\n          obr: openBrainResult[i] * globalNormValu,\r\n          hbr: highBrainResult[i] * globalNormValu,\r\n          lbr: lowBrainResult[i] * globalNormValu,\r\n          cbr: closeBrainResult[i] * globalNormValu,\r\n          op: TempCHXlow[i] * globalNormValu,\r\n          hp: TempCHXlow[i] * globalNormValu,\r\n          lp: TempCHXlow[i] * globalNormValu,\r\n  },\r\n  output: {\r\n\r\n         cp: TempCHXlow[i] * globalNormValu,\r\n         elm4: Elem4[i] * globalNormValu,\r\n         \r\n    }\r\n  })\r\n}\r\n//console.log('LAYER TWO TARGET PRICE **CLOSE** TRAINING ARRAY : ', LayerIICloseBrainPrice)\r\nOpenReAquiredTargetCL.train(LayerIICloseBrainPrice, {\r\n    errorThresh: 0.005,\r\n    log: false, \r\n    learningRate: 0.29,\r\n    momentum: momentum,\r\n    hiddenLayers: [10], // array of ints for the sizes of the hidden layers in the network\r\n    activation: 'leaky-relu', // supported activation types: ['sigmoid', 'relu', 'leaky-relu', 'tanh'],\r\n    leakyReluAlpha: 0.01, // supported for activation type 'leaky-relu'\r\n   });\r\n   //let e = Elem1.length-1\r\n   //console.log(el)\r\n   const LayerIICLBrainResult = OpenReAquiredTargetCL.run(\r\n     {\r\n       avergl: MASTERCORE[el] * globalNormValu,\r\n\r\n          elm1: Elem1[el] * globalNormValu,\r\n          elm2: Elem2[el] * globalNormValu,\r\n          elm3: Elem3[el] * globalNormValu,\r\n          obr: openBrainResult[el] * globalNormValu,\r\n          hbr: highBrainResult[el] * globalNormValu,\r\n          lbr: lowBrainResult[el] * globalNormValu,\r\n          cbr: closeBrainResult[el] * globalNormValu,\r\n          op: TempCHXlow[el] * globalNormValu,\r\n          hp: TempCHXlow[el] * globalNormValu,\r\n          lp: TempCHXlow[el] * globalNormValu,\r\n    });\r\n\r\n    LayerIICloseResult.push(LayerIICLBrainResult.cp / globalNormValu);\r\n    LayerIICloseResultElem4.push(LayerIICLBrainResult.elm4 / globalNormValu);\r\n//console.log(' LAYER TWO CLOSE RESULT: ', LayerIICLBrainResult.cp, ' LAYER TWO ELEMs CLOSE RESULT: ', LayerIICloseResultElem4);\r\n/////////////////////////////////////////////////////////////////////\r\n//////////////////////////////////////////////////************END OF LAYER TWO NEURAL NETWORK */\r\n/////////////////////////////////////////////////////////////////////\r\n//ZERO LINE\r\nfunction ZeroLine() {\r\n  var x = MASTERCORE[el] - MASTERCORE[el]// this equals zero //lol :)\r\n  theZeroLine.push(x)\r\n}\r\nZeroLine()\r\n//latest open price - the elem1 \r\nOpenMomentumX.push(ThePrice[el] - Elem1[el]);\r\n//console.log('herhehehehehehehe', OpenMomentumX - OpenVsMomentum);\r\nOpenVsMomentum.push(ThePrice[el] - OpenBrainResulta[el]);\r\n//console.log('hoohhoohoohooh',OpenVsMomentum - OpenMomentumX);\r\nfunction openMomentumX() {\r\n\r\n  var boxX;\r\n  var boxXMesurement = OpenMomentumX[el] - OpenVsMomentum[el];\r\n  if(OpenMomentumX[el] > OpenVsMomentum[el]){boxX = 1}else {boxX = 0};\r\n\r\n  MomentumXOpen.push(boxX);\r\n  MomXOpenMesurement.push(boxXMesurement);\r\n\r\n}\r\nopenMomentumX()\r\n\r\nfunction openMomentumY() {\r\n\r\n  var boxY;\r\n  var boxYMesurement = OpenVsMomentum[el] - OpenMomentumX[el];\r\n  if(OpenVsMomentum[el] > OpenMomentumX[el]){boxY = 1}else {boxY = 0};\r\n \r\n  MomentumYOpen.push(boxY);\r\n  MomYOpenMesurement.push(boxYMesurement);\r\n  \r\n}\r\nopenMomentumY()\r\n//console.log('/////////////////***OPEN MARKET VS OPEN PREDICTED/////////////////////////')\r\n//console.log('###-X-MomXOpenMesurement: ', MomXOpenMesurement, ' AND: ', MomentumXOpen)\r\n//console.log('###-Y-MomYOpenMesurement: ', MomYOpenMesurement, ' AND: ', MomentumYOpen)\r\n//console.log('//////////////////////////////////////////////////////////////////////////')\r\n//latess high price - the elem2\r\nHighMomentumX.push(HighPrice[el] - Elem2[el]);\r\n//console.log(HighMomentumX);\r\nHighVsMomentum.push(HighPrice[el] - HighBrainResultf[el]);\r\n//console.log(HighVsMomentum);\r\nfunction highMomentumX() {\r\n\r\n  var boxX;\r\n  var boxXMesurement = HighMomentumX[el] - HighVsMomentum[el];\r\n  if(HighMomentumX[el] > HighVsMomentum[el]){boxX = 1}else {boxX = 0};\r\n\r\n  MomentumXHigh.push(boxX);\r\n  MomXHighMesurement.push(boxXMesurement);\r\n\r\n}\r\nhighMomentumX()\r\n\r\nfunction highMomentumY() {\r\n\r\n  var boxY;\r\n  var boxYMesurement = HighVsMomentum[el] - HighMomentumX[el];\r\n  if(HighVsMomentum[el] > HighMomentumX[el]){boxY = 1}else {boxY = 0};\r\n \r\n  MomentumYHigh.push(boxY);\r\n  MomYHighMesurement.push(boxYMesurement);\r\n  \r\n}\r\nhighMomentumY()\r\n/*\r\nconsole.log('/////////////////***HIGH MARKET VS HIGH PREDICTED/////////////////////////')\r\nconsole.log('###-X-MomXHighMesurement: ', MomXHighMesurement, ' AND: ', MomentumXHigh)\r\nconsole.log('###-Y-MomYHighMesurement: ', MomYHighMesurement, ' AND: ', MomentumYHigh)\r\nconsole.log('//////////////////////////////////////////////////////////////////////////')\r\n*/\r\n//latess low price - the elem3\r\nLowMomentumX.push(LowPrice[el] - Elem3[el]);\r\n//console.log(LowMomentumX);\r\nLowVsMomentum.push(LowPrice[el] - LowBrainResultf[el]);\r\n//console.log(LowVsMomentum);\r\nfunction lowMomentumX() {\r\n\r\n  var boxX;\r\n  var boxXMesurement = LowMomentumX[el] - LowVsMomentum[el];\r\n  if(LowMomentumX[el] > LowVsMomentum[el]){boxX = 1}else {boxX = 0};\r\n\r\n  MomentumXLow.push(boxX);\r\n  MomXLowMesurement.push(boxXMesurement);\r\n\r\n}\r\nlowMomentumX()\r\n\r\nfunction lowMomentumY() {\r\n\r\n  var boxY;\r\n  var boxYMesurement = LowVsMomentum[el] - LowMomentumX[el];\r\n  if(LowVsMomentum[el] > LowMomentumX[el]){boxY = 1}else {boxY = 0};\r\n \r\n  MomentumYLow.push(boxY);\r\n  MomYLowMesurement.push(boxYMesurement);\r\n  \r\n}\r\nlowMomentumY()\r\n/*\r\nconsole.log('/////////////////***LOW MARKET VS LOW PREDICTED/////////////////////////')\r\nconsole.log('###-X-MomXLowMesurement: ', MomXLowMesurement, ' AND: ', MomentumXLow)\r\nconsole.log('###-Y-MomYLowMesurement: ', MomYLowMesurement, ' AND: ', MomentumYLow)\r\nconsole.log('////////////////////////////////////////////////////////////////////////')\r\n*/\r\n//latess close price - the elem4\r\nCloseMomentumX.push(ClosePrice[el] - Elem4[el]);\r\n//console.log(CloseMomentumX);\r\nCloseVsMomentum.push(ClosePrice[el] - CloseBrainResultf[el]);  \r\n//console.log(CloseVsMomentum);\r\nfunction closeMomentumX() {\r\n\r\n  var boxX;\r\n  var boxXMesurement = CloseMomentumX[el] - CloseVsMomentum[el];\r\n  if(CloseMomentumX[el] > CloseVsMomentum[el]){boxX = 1}else {boxX = 0};\r\n\r\n  MomentumXClose.push(boxX);\r\n  MomXCloseMesurement.push(boxXMesurement);\r\n\r\n}\r\ncloseMomentumX()\r\n\r\nfunction closeMomentumY() {\r\n\r\n  var boxY;\r\n  var boxYMesurement = CloseVsMomentum[el] - CloseMomentumX[el];\r\n  if(CloseVsMomentum[el] > CloseMomentumX[el]){boxY = 1}else {boxY = 0};\r\n \r\n  MomentumYClose.push(boxY);\r\n  MomYCloseMesurement.push(boxYMesurement);\r\n  \r\n}\r\ncloseMomentumY()\r\n/*\r\nconsole.log('/////////////////***CLOSE MARKET VS CLOSE PREDICTED/////////////////////////')\r\nconsole.log('###-X-MomXCloseMesurement: ', MomXCloseMesurement, ' AND: ', MomentumXClose)\r\nconsole.log('###-Y-MomYCloseMesurement: ', MomYCloseMesurement, ' AND: ', MomentumYClose)\r\nconsole.log('////////////////////////////////////////////////////////////////////////////')\r\n*/\r\n    //INITIALIZE SOME ARRAYS FOR TASKS\r\n\r\n    const thePrice = [];\r\n    const highPrice = [];\r\n    const lowPrice = [];\r\n    const closePrice = [];\r\n\r\n    \r\n    //THE TASKS TO PROPOGATE THE DATA FOR THOSE INITIAL ARRAYS \r\n    for (let i = 0; i < (CloseBrainResultf.length); i++){\r\n          thePrice.push(ThePrice[i]);   \r\n          highPrice.push(HighPrice[i]);  \r\n          lowPrice.push(LowPrice[i]); \r\n          closePrice.push(ClosePrice[i]);\r\n    }\r\n\r\n    //console.log('***************************:',thePrice)\r\n    //console.log(highPrice);\r\n    //console.log(lowPrice);\r\n    //console.log(closePrice);\r\n\r\n    //FIRST EXPERIENCE FOR CHART\r\nconst ChartLatessOP = [];\r\nconst ChartLatessHP = [];\r\nconst ChartLatessLP = [];\r\nconst ChartLatessCP = [];\r\n//const ZeroLine = [];\r\nfor (let i = 0; i < (ThePrice.length); i++)\r\n{\r\n  ChartLatessOP.push(ThePrice[i]);\r\n}\r\n\r\nfor (let i = 0; i < (HighPrice.length); i++)\r\n{\r\n  ChartLatessHP.push(HighPrice[i]);\r\n}\r\n\r\nfor (let i = 0; i < (LowPrice.length); i++)\r\n{\r\n  ChartLatessLP.push(LowPrice[i]);\r\n}\r\n\r\nfor (let i = 0; i < (ClosePrice.length); i++)\r\n{\r\n  ChartLatessCP.push(ClosePrice[i]);\r\n}\r\n\r\n//console.log('THE LATESS OPEN PRICE: ', ChartLatessOP);\r\n//console.log('THE LATESS HIGH PRICE: ', ChartLatessHP);\r\n//console.log('THE LATESS LOW PRICE: ', ChartLatessLP);\r\n//console.log('THE LATESS CLOSE PRICE: ', ChartLatessCP);\r\n//latest open price and the elem1 - midOP\r\nOpenP1.push(ChartLatessOP[el] - MASTERCORE[el]);\r\nElemP1.push(Elem1[el] - MASTERCORE[el]);\r\n//latest high price and  the elem2 - midOP\r\n\r\nHighP2.push(ChartLatessHP[el] - MASTERCORE[el]);\r\nElemP2.push(Elem2[el] - MASTERCORE[el]);\r\n//latest low price and  the elem3 - midOP\r\n\r\nLowP3.push(ChartLatessLP[el] - MASTERCORE[el]);\r\nElemP3.push(Elem3[el] - MASTERCORE[el]);\r\n//latest open close and  the elem4 - midOP\r\n\r\nCloseP4.push(ChartLatessCP[el] - MASTERCORE[el]);\r\nElemP4.push(Elem4[el] - MASTERCORE[el]);\r\n\r\n//ZeroLine.push(midOP[el] - midOP[el]);\r\n\r\n//////\r\n\r\nmouthSize.push(Elem2[el]-Elem3[el]);\r\n//console.log(mouthSize.length);\r\n\r\nmouthCeilingSize.push(HighPrice[el] - Elem2[el]);\r\n//console.log(mouthCeilingSize)\r\nmouthFloorSize.push(LowPrice[el] - Elem3[el]);\r\n//console.log(mouthFloorSize)\r\n \r\nTongueSize.push(HighPrice[el] - LowPrice[el]);\r\n//console.log(TongueSize.length)\r\n\r\nBrOpToNewOp.push(Elem1[el] - OpenBrainResultf[el]);\r\n//console.log(BrOpToNewOp);\r\n//\r\nBrHgToNewHg.push(Elem2[el] - HighBrainResultf[el]);\r\n//console.log(BrHgToNewHg);\r\n//\r\nBrLwToNewLw.push(Elem3[el] - LowBrainResultf[el]);\r\n//console.log(BrLwToNewLw);\r\n//\r\nBrClToNewCl.push(Elem4[el] - CloseBrainResultf[el]);\r\n//console.log(BrClToNewCl);\r\n\r\n//////////////////////////PREP ARRAYS TO SNAP SHOT NO MORE THEN 10 POSITIONS FROM LATESS AS START POINT AND A TALE OF 10 TICKS FOR CHART VIEWING CONVINIENCE\r\n\r\n//////////\r\nconst xTicks = increment[positionOfArray]\r\n\r\n/////////\r\n    dispatch({\r\n      type: \"SUCCESS_BITCOIN\",\r\n      payload: {\r\n    \r\n         xTicks,\r\n        // Percentage,\r\n         number,\r\n         MASTERCORE,\r\n       // epoxDate,\r\n        // epoxArray,\r\n        OpenVsMomentum,\r\n        HighVsMomentum,\r\n        LowVsMomentum,\r\n        CloseVsMomentum,\r\n        OpenMomentumX,\r\n        HighMomentumX,\r\n        LowMomentumX,\r\n        CloseMomentumX,\r\n\r\n\r\n        theZeroLine,\r\n\r\n        MomentumXOpen,\r\n        MomentumYOpen,\r\n        MomXOpenMesurement,\r\n        MomYOpenMesurement,\r\n\r\n        MomentumXHigh,\r\n        MomXHighMesurement,\r\n        MomentumYHigh,\r\n        MomYHighMesurement,\r\n\r\n        MomentumXLow,\r\n        MomXLowMesurement,\r\n        MomentumYLow,\r\n        MomYLowMesurement,\r\n\r\n        MomentumXClose,\r\n        MomXCloseMesurement,\r\n        MomentumYClose,\r\n        MomYCloseMesurement,\r\n\r\n        TongueSize, //THE PRICE OF ASSET HIGH vs LOW\r\n        mouthCeilingSize,//high predicted vs high latess\r\n        mouthFloorSize, //low predicted vs low latess\r\n        mouthSize, //THE BRAIN PREDICTION HIGH vs LOW\r\n\r\n        LayerIIOpenResult,\r\n        LayerIIHighResult,\r\n        LayerIILowResult,\r\n        LayerIICloseResult,\r\n        LayerIIOpenResultElem1,\r\n        LayerIIHighResultElem2,\r\n        LayerIILowResultElem3,\r\n        LayerIICloseResultElem4,\r\n\r\n         Elem1,\r\n         Elem2,\r\n         Elem3,\r\n         Elem4,\r\n         ThePrice,\r\n         HighPrice,\r\n         LowPrice,\r\n         ClosePrice,\r\n         closeBrainResult,\r\n         highBrainResult,\r\n         lowBrainResult,\r\n         openBrainResult,\r\n\r\n         OpenP1,\r\n         ElemP1,\r\n         HighP2,\r\n         ElemP2,\r\n         LowP3,\r\n         ElemP3,\r\n         CloseP4,\r\n         ElemP4,\r\n        // ZeroLine,\r\n    \r\n\r\n\r\n         ClsPredicted,\r\n         RealClose,\r\n\r\n         HghPredicted,\r\n         RealHigh,\r\n\r\n         LowPredicted,\r\n         RealLow,\r\n\r\n         RvsPredicted,\r\n        // PvsReal,\r\n        BrOpToNewOp,\r\n        BrHgToNewHg,\r\n        BrLwToNewLw,\r\n        BrClToNewCl,\r\n            \r\n        OpenBrainResulta,\r\n        CloseBrainResulta,\r\n        HighBrainResulta,\r\n        LowBrainResulta,\r\n\r\n        OpenBrainResultb,\r\n        CloseBrainResultb,\r\n        HighBrainResultb,\r\n        LowBrainResultb,\r\n\r\n        OpenBrainResultc,\r\n        CloseBrainResultc,\r\n        HighBrainResultc,\r\n        LowBrainResultc,\r\n\r\n        OpenBrainResultd,\r\n        CloseBrainResultd,\r\n        HighBrainResultd,\r\n        LowBrainResultd,\r\n\r\n        OpenBrainResulte,\r\n        CloseBrainResulte,\r\n        HighBrainResulte,\r\n        LowBrainResulte,\r\n            \r\n         OpenBrainResultf,\r\n         CloseBrainResultf,\r\n         HighBrainResultf,\r\n         LowBrainResultf,\r\n\r\n        latessOPvs8Lines,\r\n        predictedOPvs8Lines,\r\n        myAvgOPBoxFinalResult,\r\n        myAvgOPBoxFinalResultB,\r\n        myAvgOPBoxFinalResultI,\r\n        myAvgOPBoxFinalResultIB,\r\n\r\n        latessHGHvs8Lines,\r\n        predictedHGHvs8Lines,\r\n        myAvgHGHBoxFinalResult,\r\n        myAvgHGHBoxFinalResultB,\r\n        myAvgHGHBoxFinalResultI,\r\n        myAvgHGHBoxFinalResultIB,\r\n\r\n         latessCLVS8Lines,\r\n         predictedCLVS8Lines,\r\n         myAvgCLBoxFinalResult,\r\n         myAvgCLBoxFinalResultB,\r\n         myAvgCLBoxFinalResultI,\r\n         myAvgCLBoxFinalResultIB,\r\n\r\n         latessLWvs8Lines,\r\n         predictedLWvs8Lines,\r\n         myAvgLWBoxFinalResult,\r\n         myAvgLWBoxFinalResultB,\r\n         myAvgLWBoxFinalResultI,\r\n         myAvgLWBoxFinalResultIB ,\r\n\r\n         subLatessOPvsPredicted,\r\n         subLatessHGHvsPredicted,\r\n         subLatessLWvsPredicted,\r\n         subLatessCLVSPredicted,\r\n\r\n         //avgLatessClVSPredicted,\r\n\r\n        TempepoxNum,\r\n        TempXopen,\r\n        TempXhigh,\r\n        TempXclose,\r\n        TempXlow,\r\n\r\n        epoxResult,\r\n        openResult,\r\n        highResult,\r\n        lowResult,\r\n        closeResult,\r\n        // epox,\r\n         open,\r\n         high,\r\n         low,\r\n         close,\r\n         labels\r\n      }\r\n    })\r\n   \r\n  } catch (e) {\r\n    dispatch({\r\n      type: \"REJECTED_BITCOIN\",\r\n    })\r\n  }\r\n}\r\n\r\nexport default mailBox;\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport {Chart} from 'chart.js';\r\n//import { Linking } from 'react-native';\r\nimport './App.css';\r\nimport { Line } from 'react-chartjs-2';\r\n//import { Radar } from 'react-chartjs-2';\r\n//import { Bar } from 'react-chartjs-2';\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { getData } from \"./actions/bitcoinActions\";\r\nimport { mailBox } from \"./actions/bitcoinActions\";\r\n\r\n//import 'chartjs-adapter-luxon';\r\n//import background from \"./gallery/High_resolution.jpeg\";\r\nimport ChartStreaming from 'chartjs-plugin-streaming';\r\nChart.register(ChartStreaming);\r\nfunction App() {\r\n  const dispatch = useDispatch();\r\n  const state = useSelector(state => state.bitcoin)\r\n  const stateB = useSelector(state => state.brain)\r\n  const [num] = React.useState(500);\r\n  const [mom] = React.useState(0.1); \r\n\r\n    ////////////////////////////////////////////\r\n    const percentMoveO = [];\r\n    const MoveO = [];\r\n    const percentMoveH = [];\r\n    const MoveH = [];\r\n    const percentMoveL = [];\r\n    const MoveL = [];\r\n    const percentMoveC = [];\r\n    const MoveC = [];\r\n\r\n  const [initA] = React.useState(100);\r\n/*\r\n  const percA = [];\r\n  percA.push(percentMoveO)\r\n  /*\r\n  function foo() {\r\n    return percA.push(0)\r\n  }\r\n  foo()\r\n  \r\n // console.log(openPer)\r\n  for(let i = 0; i < percA.length; i++){\r\n    var openPer = percA[i];\r\n    if(percentMoveO > 1) {percA.push(openPer + percentMoveO)};\r\n    if(percentMoveO < 1) {percA.push(openPer - percentMoveO)};\r\n  }\r\n\r\n\r\n  const percB = [];\r\n  var highPer = percB;\r\n  if(percentMoveH >= 1) {percB.push(highPer + percentMoveH)}else{percB.push(highPer - percentMoveH)};\r\n\r\n  const percC = []; \r\n  var lowPer = percC;\r\n  if(percentMoveL >= 1) {percC.push(lowPer + percentMoveL)}else{percC.push(lowPer - percentMoveL)};\r\n\r\n  const percD = []; \r\n  var closePer = percD;\r\n  if(percentMoveC >= 1) {percD.push(closePer + percentMoveC)}else{percD.push(closePer - percentMoveC)};\r\n\r\nconsole.log(percA, percB, percC, percD)\r\n\r\n\r\n const openV = initA / 4;\r\n  const highV = initA / 4;\r\n  const lowV = initA / 4;\r\n  const closeV = initA / 4;\r\n \r\n*/\r\n  //console.log(openV, highV, lowV, closeV)\r\n  //const [inMarketAmount, setNewAmount] = React.useState(openV);\r\n  const [InitAmountopen, setInitAmountOP] = React.useState(() => initA / 4);\r\n  const [InitAmounthigh, setInitAmountHGH] = React.useState(() => initA / 4);\r\n  const [InitAmountlow, setInitAmountLW] = React.useState(() => initA / 4);\r\n  const [InitAmountclose, setInitAmountCL] = React.useState(() => initA / 4);\r\n  const [SupplyA, setSupplyA] = React.useState(100);\r\n  const [SupplyB, setSupplyB] = React.useState(100);\r\n  const [SupplyC, setSupplyC] = React.useState(100);\r\n  const [SupplyD, setSupplyD] = React.useState(100);  \r\n  /*\r\nlet ITO = (InitAmountopen);\r\nlet ITH = (InitAmounthigh);\r\nlet ITL = (InitAmountlow)\r\nlet ITC = (InitAmountclose);\r\n  var allResult =(((ITO + ITH) + ITL) + ITC);\r\n  console.log((((ITO + ITH) + ITL) + ITC)) \r\n  const [dai, setDai] = React.useState(allResult);\r\n*/\r\n\r\n  \r\n  for(let i = 0; i < mailBox[0].length; i++) {\r\n    MoveO.push(mailBox[0][499 + i] / mailBox[0][498 + i]);\r\n      }\r\n percentMoveO.push(MoveO[mailBox[0].length - 500]);\r\n  //console.log(percentMoveO)\r\n/////////////////////////////////////////////////////////\r\nfor(let i = 0; i < mailBox[1].length; i++) {\r\n  MoveH.push(mailBox[1][499 + i] / mailBox[1][498 + i]);\r\n    }\r\npercentMoveH.push(MoveH[mailBox[1].length - 500])\r\n/////////////////////////////////////////////////////////\r\nfor(let i = 0; i < mailBox[2].length; i++) {\r\n  MoveL.push(mailBox[2][499 + i] / mailBox[2][498 + i]);\r\n    }\r\npercentMoveL.push(MoveL[mailBox[2].length - 500])\r\n////////////////////////////////////////////////////////\r\nfor(let i = 0; i <mailBox[3].length; i++) {\r\n  MoveC.push(mailBox[3][499 + i] / mailBox[3][498 + i]);\r\n    }\r\npercentMoveC.push(MoveC[mailBox[3].length - 500]);\r\n\r\n\r\nconst dataOpen = [];\r\ndataOpen.push(((initA / 4) / SupplyA) * percentMoveO);\r\nconst dataHigh = [];\r\ndataHigh.push(((initA / 4) / SupplyB) * percentMoveH) \r\nconst dataLow = [];\r\ndataLow.push(((initA / 4) / SupplyC) * percentMoveL) \r\nconst dataClose = [];\r\ndataClose.push(((initA / 4) / SupplyD) * percentMoveC) \r\nconst dataTotal = [];\r\ndataTotal.push((dataOpen) + (dataHigh) + (dataLow) + (dataClose))\r\nconsole.log(dataTotal)\r\n // const [mint] = React.useState(0.1 * Supply)\r\n    \r\n  const fetchData = (time) => {\r\n    //Fetch data from redux using time\r\n    dispatch(getData({\r\n      time: time,\r\n      number: num,\r\n      momentum: mom,\r\n    //  NewAmount: setNewAmount,\r\n      initAmountOP: setInitAmountOP,\r\n      initAmountHGH: setInitAmountHGH,\r\n      initAmountLW: setInitAmountLW,\r\n      initAmountCL: setInitAmountCL,\r\n      maxSupplyA: SupplyA,\r\n      maxSupplyB: SupplyB,\r\n      maxSupplyC: SupplyC,\r\n      maxSupplyD: SupplyD,\r\n    //  Dai: setDai,\r\n    }))\r\n  }\r\n // console.log(TempXopen);\r\n///<input onChange={e => setNum(e.target.value)} />https://ipfs.io/ipfs/QmeMgBEWFGgQKjmz8CvVLGQuU32rT9zEykhiY4AfhEpckB?filename=Eye-Dragon-Wing2.png\r\nreturn (\r\n  <div className=\"App\">\r\n    <div className=\"toppageNav\">\r\n      <br />\r\n      <img align=\"left\" src ={'https://ipfs.io/ipfs/QmeMgBEWFGgQKjmz8CvVLGQuU32rT9zEykhiY4AfhEpckB?filename=Eye-Dragon-Wing2.png'}  marginLeft={\"200px\"} style={{ width: '475px', height: '450px', color: \"#black\"}} alt=\"adam\" press here/>\r\n      <h1 align=\"left\">A.I.🤖 vs Binance exchange BTC/USDT Timeseries</h1>\r\n      <h2 align=\"center\" style={{marginLeft:'10px', marginRight:'13px'}}>NEURAL NETWORK BRAIN FUNCTION</h2>\r\n      <img align=\"right\" src ={'https://ipfs.io/ipfs/QmaUWksQmDUHhEEzctWU5kxJ7siXLjRUdM7CozDt4fLe2D?filename=The-Minter.png'} href={'https://ipfs.io/ipfs/QmWRdonnmgFYUZEUUAQzenp2jeCyRiVkq8Ryp5H49mFrpz'} marginLeft={\"200px\"} style={{ width: '475px', height: '450px' }} alt=\"adam\"/>\r\n  <h5 align=\"center\" style={{marginLeft:'25px'}}>POWERED BY BRAIN.JS, CHART JS, REDUX AND REACT APP</h5>\r\n      <br />\r\n    </div>\r\n  <div className=\"navbar\">\r\n  </div>\r\n\r\n  <div className=\"info\" align = \"center\">\r\n\r\n  <h1>◻️Introduction◻️</h1>\r\n    <h4>This project is build out of passion for big Data analytic</h4>\r\n    <h4>In other words extremely large data sets that may be analyzed computationally to reveal patterns, trends, and associations, especially relating to human behavior and interactions.</h4>\r\n    <h4>This is were the experimental part comes in.</h4>\r\n    <h4>For years the common stock invester strategy was buy low sell high and some other factors abviously. But the era is now and decentralized networks are changing the map.</h4>\r\n    <h4>The road map for this app is to introduce a neural network to compute behaviour and use the network to simply act like a mirror. We compare the asset verses the asset </h4>\r\n    <h4>We compare the asset verses the asset and this outputs a uniq signature.</h4>\r\n    <h4>Then this signature can be used to compare other assets with precision</h4>\r\n    <h4>How we bring precision is to create four mock tokens A B C D and we pair there value with the open high low close value individualy.</h4>\r\n    <h4>Theses four tokens became the signature and the signature is expresss in a regular price chart</h4>\r\n   <h4>Is it 🧂salt or is it 🌶️pepper?</h4>  \r\n  <h1>◻️Word from the developer◻️</h1>\r\n    <h4>This is were the magic🪄 begins, using brain.js neural network to predict trends📈. But truly were to start?🤔</h4>\r\n    <h4>Working with brain js teleported me back 44 years ago, when I could just understand that mixing lots of colors together equals black.</h4> \r\n    <h4>I was a kid😛 playing with water colors. And we all know that observation, is the child's secret, mixing all thoses colors and learning in the process.</h4>\r\n    <h3 align=\"center\">‼️ BOUYA ‼️ 🤣 ‼️ I WAS REAL GOOD AT MAKING BLACK ‼️ 🤣 ‼️</h3>\r\n    <h5>‼️ ⚠️ ‼️ ADVISERY ‼️ ⚠️ ‼️ NO FINANCIAL ‼️ ⚠️ ‼️ ADVISERY ‼️ ⚠️ ‼️</h5>\r\n    <h1>💝‼️ WELCOME ‼️ 📈📉 ‼️ WELCOME ‼️ 📈📉 ‼️ WELCOME ‼️💝</h1>\r\n    \r\n  </div>\r\n\r\n        <div className={\"btns-wrapper\"}>\r\n        <div className=\"info\">\r\n        <div className=\"title\">\r\n          \r\n  </div>\r\n  <div className=\"interval-button\">\r\n    <br/>\r\n  <h2>🏁Start binance exchange BTC/USDT timeseries session.</h2>\r\n  <h5>\r\n      <p>\r\n      By starting the one minute interval a snapshot📸 of 500 pieces of data is introduces as a singular force train session into the neural network.\r\n      This happens singularly every minute.\r\n      </p>\r\n </h5>\r\n <p></p>\r\n  <h5>\r\n      <p>\r\n      This particular code solution is structured with 4 neural networks. One for the Open, the High, the Low and the Close. (OHLC KLine). \r\n      As a developer we require an output response as a prediction from these 4 instances. But from the brain's perspective the output is a target.\r\n      This is how the bias of the brain is calibrated. \r\n      If open is the target then this data image must = the bias data image and the open, high, close data image.\r\n      If not ajust the bias to what ever the default setting it is ex: 0.3 and recycle till this x factor has atteined 0.005 for example and spit out what ever output value it has.\r\n      This will be the prediction value. \r\n      </p>\r\n  </h5>\r\n\r\n  <h5>\r\n      <p>\r\n      There are 4 individual neural networks let's call these instances of the brain. \r\n      And one instance has only four pieces of data to determine each other's next price.\r\n      </p>\r\n  </h5>\r\n  <h5>\r\n      <p>\r\n      Trainning Structure num# 1-OPEN: high, low, close is used as input trainning data and OPEN is used as output trainning data.\r\n      </p>\r\n      <p>\r\n      Trainning Structure num# 2-HIGH: open, low, close is used as input trainning data and HIGH is used as output trainning data.\r\n      </p>\r\n      <p>\r\n      Trainning Structure num# 3-LOW: open, high, close is used as input trainning data and LOW is used as output trainning data.\r\n      </p>\r\n      <p>\r\n      Trainning Structure num# 4-CLOSE: open, high, low is used as input trainning data and CLOSE is used as output trainning data.\r\n      </p>\r\n  </h5>\r\n  <h5>The neural instance is repeted 4 times with opposit input and output trainning data. As describe above.</h5>\r\n  <h5>The 4 neural network outputs are color coded and used through out the charts.</h5>\r\n  \r\n  <h4>OPEN : RED🔴 | HIGH : BLUE🔵 | LOW : YELLOW🟡 | CLOSE : GREEN🟢</h4>\r\n \r\n\r\n          <h4>The Training array snapshot📸.</h4>\r\n          <Line className='snap-shot' \r\n           data={state.data} options={{responsive: true}}\r\n         />\r\n         <div className='tinker-minter'>\r\n           <h1 className='tinker-title'>\r\n             THE TINKER MINTER DAI EXTRACTOR\r\n           </h1>\r\n           <h3 className='tinker-title'>\r\n             (TEST VERSION 1.0.0)\r\n           </h3>\r\n         <button className='btns-wrapperA' onClick={() => setInterval(() => {fetchData(\"momentum\")}, 60100)}>⏳START 1 MIN INTERVAL</button>\r\n           <button className='btns-wrapperB' onClick={(() => {fetchData()})}>🕳️INSERT TRAINNING DATA📃📃... NOW🕳️</button>\r\n\r\n           <div className='init-amount-backg'>\r\n\r\n           <div className='initial-Amount'>\r\n           <h1>🧐</h1>\r\n           <h4>SPECULATIVE MOCK DAI ACCOUNT: {(InitAmountopen * percentMoveO) + (InitAmounthigh * percentMoveH) + (InitAmountlow * percentMoveL) + (InitAmountclose * percentMoveC)}</h4>\r\n           </div>\r\n\r\n           </div>\r\n\r\n      <div className='moch-tokens' >\r\n      <div className='maxSupA'>\r\n           <input onChange={e => setSupplyA(e.target.value)} />\r\n           <h1>🪙</h1>\r\n           <h4>MOCK TOKEN A MAX SUPPLY : {SupplyA}</h4>\r\n           <input onChange={e => setInitAmountOP(e.target.value)} />\r\n           <h4>PRICE PER UNIT : {InitAmountopen / SupplyA} </h4>\r\n           <h4> PERCENT % MOVE : {percentMoveO}</h4>\r\n           <h4>DAI BALANCE : {InitAmountopen * percentMoveO}</h4>\r\n           </div>\r\n\r\n           <div className='maxSupB'>\r\n           <input onChange={e => setSupplyB(e.target.value)} />\r\n           <h1>🪙</h1>\r\n           <h4>MOCK TOKEN B MAX SUPPLY : {SupplyB}</h4>\r\n           <input onChange={e => setInitAmountHGH(e.target.value)} />\r\n           <h4> PRICE PER UNIT : {InitAmounthigh / SupplyB} </h4>\r\n           <h4> PERCENT % MOVE : {percentMoveH}</h4>\r\n           <h4> DAI BALANCE : {InitAmounthigh * percentMoveH}</h4>\r\n           </div>\r\n\r\n           <div className='maxSupC'>\r\n           <input onChange={e => setSupplyC(e.target.value)} />\r\n           <h1>🪙</h1>\r\n           <h4>MOCK TOKEN C MAX SUPPLY : {SupplyC}</h4>\r\n           <input onChange={e => setInitAmountLW(e.target.value)} />\r\n           <h4>PRICE PER UNIT : {InitAmountlow / SupplyC}</h4>\r\n           <h4> PERCENT % MOVE : {percentMoveL}</h4>\r\n           <h4> DAI BALANCE : {InitAmountlow * percentMoveL}</h4>\r\n           </div>\r\n\r\n           <div className='maxSupD'>\r\n           <input onChange={e => setSupplyD(e.target.value)} />\r\n           <h1>🪙</h1>\r\n           <h4>MOCK TOKEN D MAX SUPPLY : {SupplyD}</h4>\r\n           <input onChange={e => setInitAmountCL(e.target.value)} />\r\n           <h4>PRICE PER UNIT : {InitAmountclose / SupplyD}</h4>\r\n           <h4> PERCENT % MOVE : {percentMoveC}</h4>\r\n           <h4>DAI BALANCE : {InitAmountclose * percentMoveC}</h4>\r\n           </div>\r\n      </div>\r\n      <div className='dai-amount-backg'>\r\n           <div className='dai-Amount'>    \r\n           <h1>🪙</h1>\r\n           <h4>MOCK DAI ACCOUNT: {(InitAmountopen * percentMoveO) + (InitAmounthigh * percentMoveH) + (InitAmountlow * percentMoveL) + (InitAmountclose * percentMoveC)}</h4>\r\n           </div>\r\n\r\n           </div>\r\n         </div>\r\n\r\n\r\n\r\n     \r\n         <div className= 'projects-link' >\r\n         <img className='the-image-projects' src ={'https://ipfs.io/ipfs/QmTTabZTHf7ejwTJxUwNR9g15aCV9Q65yD5UvdQb7qfwMm?filename=Dragon-Head.png'} alt=\"adam\"/>\r\n         <a className= 'the-link-projects' href={'http://crypto-flowers.surge.sh/'}> ☣️NFT-testnet-rinkeby☣️ CRYPTO-FLOWERS GALLERY</a>\r\n         \r\n         </div>\r\n\r\n          </div>\r\n          <div style={{marginBottom: '100px'}}>\r\n\r\n          </div>\r\n         {state.loading && <p>Loading...</p>}\r\n          </div>\r\n  </div>\r\n        <div className='container'>\r\n\r\n        <div className='chartA-I-result' style={{height:'60%', width:'fit-content(100)'}}>\r\n            <h2 align = 'center'>🔴PREDICTED OPEN🔴</h2>\r\n            <h5 align = 'center'>BTC/USDT TICKER📈</h5>\r\n            <h3> PREDICTED OPEN VERSES LATESS OPEN PRICE </h3>\r\n         <Line\r\n         data={stateB.dataOPEN} options={{responsive: true}}\r\n         />\r\n         </div>\r\n\r\n         <div className='chartA-I-result' style={{height:'60%', width:'fit-content(100)'}}>\r\n            <h2 align = 'center'>🔴EXPERIMENTAL OPEN TRIGGER🔴</h2>\r\n            <h5 align = 'center'>BTC/USDT TICKER📈</h5>\r\n            <h3>🔴EXPERIMENTAL </h3>\r\n            <Line\r\n         data={stateB.dataTimeTwistOPEN} options={{responsive: true}}\r\n         />\r\n         </div>\r\n\r\n\r\n\r\n         <div className='chartA-I-result' style={{height:'60%', width:'fit-content(100)'}}>\r\n            <h2 align = 'center'>🔵PREDICTED HIGH🔵</h2>\r\n            <h5 align = 'center'>BTC/USDT TICKER📈</h5>\r\n            <h3>PREDICTED HIGH VERSES LATESS HIGH PRICE </h3>\r\n         <Line\r\n         data={stateB.dataHIGH} options={{responsive: true}}\r\n         />\r\n         </div>\r\n\r\n         \r\n         <div className='chartA-I-result' style={{height:'60%', width:'fit-content(100)'}}>\r\n            <h2 align = 'center'>🔵EXPERIMENTAL HIGH TRIGGER🔵</h2>\r\n            <h5 align = 'center'>BTC/USDT TICKER📈</h5>\r\n            <h3>🔵EXPERIMENTAL</h3>\r\n            <Line\r\n         data={stateB.dataTimeTwistHIGH} options={{responsive: true}}\r\n         />\r\n         </div>\r\n\r\n\r\n\r\n         <div className='chartA-I-result' style={{height:'60%', width:'fit-content(100)'}}>\r\n            <h2 align = 'center'>🟡PREDICTED LOW🟡</h2>\r\n            <h5 align = 'center'>BTC/USDT TICKER📈</h5>\r\n            <h3> PREDICTED LOW VERSES LATESS LOW PRICE</h3>\r\n         <Line\r\n         data={stateB.dataLOW} options={{responsive: true}}\r\n         />\r\n         </div>\r\n\r\n\r\n\r\n\r\n         <div className='chartA-I-result' style={{height:'60%', width:'fit-content(100)'}}>\r\n            <h2 align = 'center'>🟡EXPERIMENTAL LOW TRIGGER🟡</h2>\r\n            <h5 align = 'center'>BTC/USDT TICKER📈</h5>\r\n            <h3>🟡EXPERIMENTAL</h3>\r\n            <Line\r\n         data={stateB.dataTimeTwistLOW} options={{responsive: true}}\r\n         />\r\n         </div>\r\n\r\n\r\n           <div className='chartA-I-result' style={{height:'60%', width:'fit-content(100)'}}>\r\n            <h2 align = 'center'>🟢PREDICTED CLOSE🟢</h2>\r\n            <h5 align = 'center'>BTC/USDT TICKER📈</h5>\r\n            <h3>EXPERIMENTAL TRIGGER LINES CONTINUE... </h3>\r\n         <Line\r\n         data={stateB.dataCLOSE} options={{responsive: true}}\r\n         />\r\n         </div>\r\n\r\n\r\n         <div className='chartA-I-result' style={{height:'60%', width:'fit-content(100)'}}>\r\n            <h2 align = 'center'>🟢EXPERIMENTAL CLOSE TRIGGER🟢</h2>\r\n            <h5 align = 'center'>BTC/USDT TICKER📈</h5>\r\n            <h3>🟢EXPERIMENTAL</h3>\r\n\r\n         <Line\r\n         data={stateB.dataTimeTwist} options={{responsive: true}}\r\n         />\r\n         </div>\r\n\r\n           <div className='chartA-I-result' style={{height:'60%', width:'fit-content(100)'}}>\r\n            <h2 align = 'center'>🔴🔵🟡🟢EXPERIMENTAL OPEN HIGH LOW CLOSE TRIGGER🟢🟡🔵🔴</h2>\r\n            <h5 align = 'center'>BTC/USDT TICKER📈</h5>\r\n            <h3>EXPERIMENTAL TRIGGER LINES CONTINUE... </h3>\r\n\r\n         <Line\r\n         data={stateB.dataG} options={{responsive: true}}\r\n         />\r\n         </div>\r\n\r\n\r\n           <div className='chartC-III-result' style={{height:'60%', width:'fit-content(100)'}}>\r\n           <h2 align = 'center'>⚪THE LATESS PRICE VERSES THE PREDICTOR⚪</h2>\r\n           <h5 align = 'center'>BTC/USDT TICKER📈</h5>\r\n           <h3> CHART NUMBER #3 </h3>\r\n\r\n             <Line \r\n         data={stateB.dataC} options={{responsive: true}}\r\n         />\r\n         </div>\r\n\r\n         <div className='chartD-IV-result' style={{height:'60%', width:'fit-content(100)'}}>\r\n            <h2 align = 'center'>⚪THE PREDICTOR VERSES THE OPEN⚫/CLOSE⚫⚪</h2>\r\n            <h5 align = 'center'>BTC/USDT TICKER📈</h5>\r\n            <h3> CHART NUMBER #4 </h3>\r\n\r\n         <Line \r\n         data={stateB.dataD} options={{responsive: true}}\r\n         />\r\n         </div>\r\n\r\n          <div className='chartF-VI-result' style={{height:'60%', width:'fit-content(100)'}}>\r\n            <h2 align = 'center'>⚪BRAIN PREDICTOR LAYER@2.0.0⚪</h2>\r\n            <h5 align = 'center'>BTC/USDT TICKER📈</h5>\r\n            <h3 > CHART NUMBER #6 </h3>\r\n\r\n            <div align = 'center'>\r\n            <h4>The second layer is experimental but none the less very exiting!</h4>\r\n             <h4>From neural network output♻️ to the input♻️ of a new neural network instance, one must compartmentalize brain.js into sections or categories.</h4>\r\n             <h4>The chart agglomerates the results of four neural networks instances using latess market data and latess data from the first neural network(first layer)</h4>\r\n             <h4>When you first start the interval you will notice it is calibrating it's result to target the asset. Its because the training array is very small.</h4>\r\n             <h4>As the training array increases the calibrating becomes more and more dominant. ☣️Why not let's experiment☣️.</h4>\r\n             </div>\r\n\r\n         <Line \r\n         data={stateB.dataB} options={{responsive: true}}\r\n         /></div>\r\n\r\n         </div>\r\n         <div className='bottom-nav' >\r\n          <img src ={'https://ipfs.io/ipfs/QmTTabZTHf7ejwTJxUwNR9g15aCV9Q65yD5UvdQb7qfwMm?filename=Dragon-Head.png'} href={'https://ipfs.io/ipfs/QmWRdonnmgFYUZEUUAQzenp2jeCyRiVkq8Ryp5H49mFrpz'} style={{ width: '385px', marginTop: '3%', height: '400px' }} alt=\"adam\" button here/>\r\n          <div>\r\n           <h1 align='center' style={{marginTop: '75px'}}>Road Map</h1>\r\n           <h4 align='center'>The projet concists of targeting a fair price of any asset leading to take advantage when price is temporarly depressed</h4>\r\n           </div>\r\n          <div align=\"center\" style={{ width: '60%', height: '50%', marginLeft: '20%', marginBottom: '1%', backgroundColor: 'rgba(3, 0, 0, 0.1)' }}>\r\n        <h1 style={{height : '150px'}}> \r\n                  <a  align=\"center\" href={'https://discord.gg/9HYr36dF'} rel=\"noopener noreferrer\" style={{color: \"#black\"}}>\r\n                                  MY DISCORD SERVER\r\n                  </a> </h1>\r\n        </div>\r\n       <div>\r\n       </div>\r\n        </div>\r\n        \r\n\r\n           </div>\r\n           \r\n           );\r\n\r\n          }\r\n          export default App;\r\n/*\r\nSOME STUFF:\r\n          <div>\r\n             <h3>----- NEURAL NETWORK PREDICTED ASSET ANALYSES </h3>\r\n             <h4>⚪ With humbleness to bring light were to man has gone before {`https://discord.gg/UYqAsChs`}</h4>\r\n            <Iframe url=\"https://www.youtube.com/watch?v=y_UHEy6vbv0\"\r\n        width=\"50px\"\r\n        height=\"50px\"\r\n        id=\"myId\"\r\n        className=\"myClassname\"\r\n        display=\"initial\"\r\n        position=\"center\"></Iframe>\r\n            \r\n     <button  onClick url={ () => (\"https://discord.gg/UYqAsChs\")}>CHECK MY HOME BREW HUB</button>\r\n       \r\n     style={{ backgroundImage: `url(${background})` }}\r\n\r\n             \r\n             </div>\r\n <input onChange={e => setNum(e.target.value)} />\r\n        <div className='chartB-II-result' style={{height:'60%', width:'fit-content(100)'}}>\r\n           <h2 align = 'center'>⚪THE PRICE FORCE AND TREND DIRECTION⚪</h2>\r\n           <h5 align = 'center'>BTC/USDT TICKER📈</h5>\r\n           <h3> CHART NUMBER #2 </h3>\r\n\r\n         <Line\r\n         data={stateB.dataH} options={{responsive: true}}\r\n         />\r\n         </div>\r\n\r\n*/\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","//Random color generator\r\n//var r = () => Math.random() * 256 >> 0;\r\n//var color = `rgb(${r()}, ${r()}, ${r()})`;\r\n//import number from '../App'\r\nconst initalState = {\r\n  loading: false,\r\n  data: {\r\n    labels: [],\r\n    datasets: [{\r\n      type: 'line',\r\n      label: \"TRAINNING CHART\",\r\n      data: [],\r\n      backgroundColor: 'rgba(226, 153, 18, 0.9)',\r\n      borderColor: 'rgba(178, 116, 0, 1)',\r\n      pointBorderColor: 'rgba(25, 16, 0, 1)',\r\n      borderWidth: 0.5\r\n    }],\r\n    options : {\r\n      responsive: true,\r\n      yAxes: [{\r\n        ticks: {\r\n            min: 0,\r\n            max:55,\r\n            stepSize: 1\r\n        }\r\n    }],\r\n      plugins: {\r\n        title: {\r\n          display: true,\r\n          text: 'Chart.js Horizontal Bar Chart',\r\n        },\r\n      },\r\n      scales: {\r\n        x: {\r\n          type: 'realtime',\r\n          // Change options only for THIS AXIS\r\n          realtime: {\r\n            duration: 60100\r\n          }\r\n        },\r\n      },\r\n    }\r\n  },\r\n};\r\n\r\n\r\n\r\n\r\nconst bitcoinReducer = (state = initalState, action) => {\r\n  const { type, payload } = action;\r\n\r\n  switch (type) {\r\n    case \"AWAITING_BITCOIN\":\r\n      return {\r\n        ...state,\r\n        loading: true\r\n      }\r\n    case \"REJECTED_BITCOIN\":\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n      }\r\n    case \"SUCCESS_BITCOIN\":\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        data: {\r\n          labels: payload.TempepoxNum,\r\n          datasets: [\r\n          {\r\n            type: 'line',\r\n            label: \"BTC OPEN\",\r\n            data: payload.TempXopen,\r\n            backgroundColor: 'rgba(255, 0, 0, 0.4)',\r\n            borderColor: 'rgba(255, 0, 0, 0.9)',\r\n            pointBorderColor: 'rgba(25, 16, 0, 1)',\r\n            order: 1,\r\n            borderWidth: 0.5\r\n          },{\r\n            type: 'line',\r\n            label: \"BTC HIGH\",\r\n            data: payload.TempXhigh,\r\n            backgroundColor:'rgba(22, 91, 160, 0.9)',\r\n            borderColor: 'rgba(14, 38, 62,0.9)',\r\n            pointBorderColor: 'rgba(22, 91, 160, 1)',\r\n            order: 2 ,\r\n            borderWidth: 0.5             \r\n          },{\r\n            type: 'line',\r\n            label: \"BTC LOW\",\r\n            data: payload.TempXlow,\r\n            backgroundColor:'rgba(246, 239, 28, 0.48)',\r\n            borderColor: 'rgba(255,255,0, 0.9)',\r\n            pointBorderColor: 'rgba(255,255,0, 0.9)',\r\n            order: 3,\r\n            borderWidth: 0.5\r\n          },\r\n          {\r\n            label: \"BTC CLOSE\",\r\n            data: payload.TempXclose,\r\n            backgroundColor: 'rgba(0,177,64, 1)',\r\n            borderColor: 'rgba(0, 0, 0, 0.8)',\r\n            pointBorderColor: 'rgba(0, 0, 0 , 0.8)',\r\n            order: 4,\r\n            borderWidth: 0.5\r\n          },\r\n        ],\r\n        options : {\r\n          responsive: true,\r\n          plugins: {\r\n            title: {\r\n              display: true,\r\n              text: 'Chart.js Horizontal Bar Chart',\r\n            },\r\n          },\r\n          scales: {\r\n            x: {\r\n              type: 'realtime',\r\n              // Change options only for THIS AXIS\r\n              realtime: {\r\n                duration: 60100\r\n              }\r\n            },\r\n          },\r\n        }\r\n      },\r\n      \r\n\r\n        }\r\n         default: return state;\r\n          }\r\n         }\r\n          export default bitcoinReducer;\r\n      \r\n\r\n      \r\n","const initalState = {\r\n  Loading: false,\r\n  dataB: {\r\n    labels: [],\r\n    datasets: [{\r\n      type: 'radar',\r\n      label: \"BOT CHART PREDICTION\",\r\n      data: [],\r\n      backgroundColor: 'rgba(226, 153, 18, 0.9)',\r\n      borderColor: 'rgba(178, 116, 0, 1)',\r\n      pointBorderColor: 'rgba(25, 16, 0, 1)',\r\n      options: {\r\n        responsive: true\r\n      }\r\n    }],\r\n    options : {\r\n      yAxes: [{\r\n          ticks: {\r\n              min: 0,\r\n              max: 55,\r\n              stepSize: 1\r\n          }\r\n      }]\r\n  }\r\n  },\r\n  dataC: {\r\n    labels: [],\r\n    datasets: [{\r\n      type: 'bar',\r\n      label: \"BOT CHART PREDICTION\",\r\n      data: [],\r\n      backgroundColor: 'rgba(226, 153, 18, 0.9)',\r\n      borderColor: 'rgba(178, 116, 0, 1)',\r\n      pointBorderColor: 'rgba(25, 16, 0, 1)',\r\n      options: {\r\n        responsive: true\r\n      }\r\n    }]\r\n  },\r\n  dataD: {\r\n      labels: [],\r\n      datasets: [{\r\n        type: 'line',\r\n        label: \"Real Time vs Open Prediction\",\r\n        data: [],\r\n        backgroundColor: 'rgba(226, 153, 18, 0.9)',\r\n        borderColor: 'rgba(178, 116, 0, 1)',\r\n        pointBorderColor: 'rgba(25, 16, 0, 1)',\r\n        options: {\r\n          scales: {\r\n              x: {\r\n                  ticks: {\r\n                      // Include a dollar sign in the ticks\r\n                      callback: function(value, index, values) {\r\n                          return '$' + value;\r\n                      }\r\n                  }\r\n              }\r\n          }\r\n      }\r\n      }],\r\n    },\r\n    dataF: {\r\n      labels: [],\r\n      datasets: [{\r\n        type: 'line',\r\n        label: \"BOT CHART PREDICTION\",\r\n        data: [],\r\n        backgroundColor: 'rgba(226, 153, 18, 0.9)',\r\n        borderColor: 'rgba(178, 116, 0, 1)',\r\n        pointBorderColor: 'rgba(25, 16, 0, 1)',\r\n        options: {\r\n          responsive: true\r\n        }\r\n      }],\r\n      \r\n    },\r\n    dataG: {\r\n      labels: [],\r\n      datasets: [{\r\n        type: 'line',\r\n        label: \"BOT CHART PREDICTION\",\r\n        data: [],\r\n        backgroundColor: 'rgba(226, 153, 18, 0.9)',\r\n        borderColor: 'rgba(178, 116, 0, 1)',\r\n        pointBorderColor: 'rgba(25, 16, 0, 1)',\r\n        options: {\r\n          responsive: true\r\n        }\r\n      }],\r\n      \r\n    },\r\n    dataH: {\r\n      labels: [],\r\n      datasets: [{\r\n        type: 'line',\r\n        label: \"BOT CHART PREDICTION\",\r\n        data: [],\r\n        backgroundColor: 'rgba(226, 153, 18, 0.9)',\r\n        borderColor: 'rgba(178, 116, 0, 1)',\r\n        pointBorderColor: 'rgba(25, 16, 0, 1)',\r\n        options: {\r\n          responsive: true\r\n        }\r\n      }],\r\n      \r\n    }, \r\n    dataOPEN: {\r\n      labels: [],\r\n      datasets: [{\r\n        type: 'line',\r\n        label: \"BOT CHART PREDICTION\",\r\n        data: [],\r\n        backgroundColor: 'rgba(226, 153, 18, 0.9)',\r\n        borderColor: 'rgba(178, 116, 0, 1)',\r\n        pointBorderColor: 'rgba(25, 16, 0, 1)',\r\n        options: {\r\n          responsive: true\r\n        }\r\n      }],\r\n      \r\n    },\r\n    dataHIGH: {\r\n      labels: [],\r\n      datasets: [{\r\n        type: 'line',\r\n        label: \"BOT CHART PREDICTION\",\r\n        data: [],\r\n        backgroundColor: 'rgba(226, 153, 18, 0.9)',\r\n        borderColor: 'rgba(178, 116, 0, 1)',\r\n        pointBorderColor: 'rgba(25, 16, 0, 1)',\r\n        options: {\r\n          responsive: true\r\n        }\r\n      }],\r\n      \r\n    },\r\n    dataLOW: {\r\n      labels: [],\r\n      datasets: [{\r\n        type: 'line',\r\n        label: \"BOT CHART PREDICTION\",\r\n        data: [],\r\n        backgroundColor: 'rgba(226, 153, 18, 0.9)',\r\n        borderColor: 'rgba(178, 116, 0, 1)',\r\n        pointBorderColor: 'rgba(25, 16, 0, 1)',\r\n        options: {\r\n          responsive: true\r\n        }\r\n      }],\r\n      \r\n    },\r\n    dataCLOSE: {\r\n      labels: [],\r\n      datasets: [{\r\n        type: 'line',\r\n        label: \"BOT CHART PREDICTION\",\r\n        data: [],\r\n        backgroundColor: 'rgba(226, 153, 18, 0.9)',\r\n        borderColor: 'rgba(178, 116, 0, 1)',\r\n        pointBorderColor: 'rgba(25, 16, 0, 1)',\r\n        options: {\r\n          responsive: true\r\n        }\r\n      }],\r\n      \r\n    }, \r\n    dataTimeTwist: {\r\n      labels: [],\r\n      datasets: [{\r\n        type: 'line',\r\n        label: \"BOT CHART PREDICTION\",\r\n        data: [],\r\n        backgroundColor: 'rgba(226, 153, 18, 0.9)',\r\n        borderColor: 'rgba(178, 116, 0, 1)',\r\n        pointBorderColor: 'rgba(25, 16, 0, 1)',\r\n        options: {\r\n          responsive: true\r\n        }\r\n      }],\r\n      \r\n    }, \r\n\r\n}\r\nconst brainReducer = (state = initalState, action) => {\r\n  const { type, payload } = action;\r\n\r\n  switch (type) {\r\n      case \"AWAITING_BITCOIN\":\r\n        return {\r\n          ...state,\r\n          loading: true\r\n        }\r\n      case \"REJECTED_BITCOIN\":\r\n        return {\r\n          ...state,\r\n          loading: false,\r\n        }\r\n      case \"SUCCESS_BITCOIN\":\r\n\r\n          return {\r\n              ...state,\r\n              loading: false,\r\n            /*\r\nepoxSlmnRslt,\r\nLayerIINNOpRslt,\r\nLayerIINNHghRslt,\r\nLayerIINNLwRslt,\r\nLayerIINNClRslt,\r\nLayerIINNOpElm1,\r\nLayerIINNHghElm2,\r\nLayerIINNLwElm3,\r\nLayerIINNClElm4,\r\nopenSlmnRslt\r\ncloseSlmnRslt\r\n\r\n        epoxSalomonResult,\r\n        openSalomonResult,\r\n        closeSalomonResult,\r\n        LayerIIOpenResult,\r\n        LayerIIHighResult,\r\n        LayerIILowResult,\r\n        LayerIICloseResult,\r\n        LayerIIOpenResultElem1,\r\n        LayerIIHighResultElem2,\r\n        LayerIILowResultElem3,\r\n        LayerIICloseResultElem4,\r\n            */\r\n              dataB: {\r\n                labels: payload.epoxResult,\r\n                text: 'EXPERIMENTAL',\r\n                datasets: [\r\n                  {\r\n                  type: 'line',\r\n                  label: \"OPEN PRICE FROM SECONDARY LAYER\",\r\n                  data: payload.LayerIIOpenResult,\r\n                  backgroundColor: 'rgba(255, 0, 0, 1)',\r\n                  borderColor: '\trgba(255, 0, 0, 1)',\r\n                  pointBorderColor: 'rgba(25, 16, 1)',\r\n      \r\n                  order: 1\r\n                  },\r\n                  {\r\n                    type: 'line',\r\n                    label: \"ELEM1 OUTPUT BY BRAIN\",\r\n                    data: payload.LayerIIOpenResultElem1,\r\n                    backgroundColor: 'rgba(255, 0, 0, 0.4)',\r\n                    borderColor: '\trgba(255, 0, 0, 0.9)',\r\n                    pointBorderColor: 'rgba(25, 16, 0, 1)',\r\n        \r\n                    order: 2\r\n                    },\r\n                  {\r\n                    type: 'line',\r\n                    label: \"HIGH PRICE FROM SECONDARY LAYER\",\r\n                    data: payload.LayerIIHighResult, \r\n                    backgroundColor:'rgba(0,0,255, 0.7)',\r\n                    borderColor: 'rgba(0,0,255, 0.9)',\r\n                    pointBorderColor: 'rgba(0,0,255, 0.8)',\r\n        \r\n                    order: 3\r\n                    },\r\n                    {\r\n                      type: 'line',\r\n                      label: \"ELEM2 OUTPUT BY BRAIN\",\r\n                      data: payload.LayerIIHighResultElem2, \r\n                      backgroundColor:'rgba(0,0,255, 0.7)',\r\n                      borderColor: 'rgba(0,0,255, 0.9)',\r\n                      pointBorderColor: 'rgba(0,0,255, 0.8)',\r\n          \r\n                      order: 4\r\n                      },\r\n                    {\r\n                      type: 'line',\r\n                      label: \"LOW PRICE FROM SECONDARY LAYER\",\r\n                      data: payload.LayerIILowResult,\r\n                      backgroundColor:'rgba(255,255,0, 0.8)',\r\n                      borderColor: 'rgba(255,255,0, 0.9)',\r\n                      pointBorderColor: 'rgba(255,255,0, 0.9)',\r\n          \r\n                      order: 5\r\n                      },\r\n                      {\r\n                        type: 'line',\r\n                        label: \"ELEM3 OUTPUT BY BRAIN\",\r\n                        data: payload.LayerIILowResultElem3,\r\n                        backgroundColor:'rgba(255,255,0, 0.8)',\r\n                        borderColor: 'rgba(255,255,0, 0.9)',\r\n                        pointBorderColor: 'rgba(255,255,0, 0.9)',\r\n            \r\n                        order: 6\r\n                        },\r\n                        {\r\n                           type: 'line',\r\n                           label: \"CLOSE PRICE FROM SECONDARY LAYER\",\r\n                           data: payload.LayerIICloseResult,\r\n                           backgroundColor:'rgba(10, 204, 0, 0.7)',\r\n                           borderColor: 'rgba(10, 204, 0, 0.9)',\r\n                           pointBorderColor: 'rgba(10, 204, 0, 0.7)',\r\n                           order: 7\r\n                           },\r\n                            {\r\n                               type: 'line',\r\n                               label: \"ELEM4 OUTPUT BY BRAIN\",\r\n                               data: payload.LayerIICloseResultElem4,\r\n                               backgroundColor:'rgba(10, 204, 0, 0.7)',\r\n                               borderColor: 'rgba(10, 204, 0, 0.9)',\r\n                               pointBorderColor: 'rgba(10, 204, 0, 0.7)',\r\n                               order: 8\r\n                              },\r\n\r\n                              {        \r\n                                type: \"line\",\r\n                                label: \"BTC LATESS OPEN PRICE\" ,\r\n                                data: payload.openResult,                        \r\n                                backgroundColor: 'rgba(255, 0, 0, 1)',\r\n                                borderColor: 'rgba(0, 0, 0, 0.8)',\r\n                                pointBorderColor: 'rgba(0, 0, 0 , 0.8)',\r\n                                order: 9,\r\n                                },\r\n                                {\r\n                                  type: \"line\",\r\n                                  label: \"BTC LATESS CLOSE PRICE\" ,\r\n                                  data: payload.closeResult,                        \r\n                                  backgroundColor: 'rgba(0,177,64, 1)',\r\n                                  borderColor: 'rgba(0, 0, 0, 0.8)',\r\n                                  pointBorderColor: 'rgba(0, 0, 0 , 0.8)',\r\n                                  order: 10,\r\n                                  }\r\n                                  \r\n                                 ],\r\n                                 options: {\r\n                                   responsive: true,\r\n                                   yAxes: [{\r\n                                    ticks: {\r\n                                        min: 0,\r\n                                        max: 55,\r\n                                        stepSize: 1\r\n                                    }\r\n                                }],\r\n                                   scales: {\r\n                                    x: {\r\n                                      type: 'realtime',\r\n                                      // Change options only for THIS AXIS\r\n                                      realtime: {\r\n                                        duration: 60100\r\n                                      }\r\n                                    },\r\n                                  },\r\n                                            \r\n                                 }\r\n                                },\r\n              dataD: {\r\n                    labels: payload.epoxResult,\r\n                    datasets: [{\r\n                      type: \"line\",\r\n                      label: \"BTC LATESS OPEN PRICE\" ,\r\n                      data: payload.openResult,                        \r\n                      backgroundColor: 'rgba(255, 0, 0, 1)',\r\n                      borderColor: 'rgba(0, 0, 0, 0.8)',\r\n                      pointBorderColor: 'rgba(0, 0, 0 , 0.8)',\r\n                      order: 1,\r\n                    },\r\n                    {\r\n                      type: \"line\",\r\n                      label: \"BTC LATESS CLOSE PRICE\" ,\r\n                      data: payload.closeResult,                        \r\n                      backgroundColor: 'rgba(0,177,64, 1)',\r\n                      borderColor: 'rgba(0, 0, 0, 0.8)',\r\n                      pointBorderColor: 'rgba(0, 0, 0 , 0.8)',\r\n                      order: 2,\r\n                    },\r\n/*\r\n                    {\r\n                      type: 'line',\r\n                      label: \"PREDICTED OPEN\",\r\n                      data: payload.OpenBrainResulta,\r\n                      backgroundColor: 'rgba(255, 0, 0, 0.4)',\r\n                      borderColor: 'rgba(255, 0, 0, 0.9)',\r\n                      pointBorderColor: 'rgba(25, 16, 0, 1)',\r\n                      order: 3,\r\n                    },\r\n                    {\r\n                      type: 'line',\r\n                      label: \"PREDICTED HIGH\",\r\n                      data: payload.HighBrainResult,\r\n                      backgroundColor: 'rgba(22, 91, 160, 0.7)',\r\n                      borderColor: '\trgba(22, 91, 160, 0.9)',\r\n                      pointBorderColor: 'rgba(22, 91, 160, 1)',\r\n                      order: 4,\r\n                    },\r\n                    {\r\n                      type: 'line',\r\n                      label: \"PREDICTED LOW\",\r\n                      data: payload.LowBrainResult,\r\n                      backgroundColor: 'rgba(255, 255, 0, 0.7)',\r\n                      borderColor: 'rgba(255, 255, 0, 0.9)',\r\n                      pointBorderColor: 'rgba(255, 255, 0, 1)',\r\n                      order: 5,\r\n                    },\r\n                    {\r\n                      type: 'line',\r\n                      label: \"PREDICTED CLOSE\",\r\n                      data: payload.CloseBrainResult,\r\n                      backgroundColor: 'rgba(0,177,64, 1)',\r\n                      borderColor: 'rgba(0,177,64, 1)',\r\n                      pointBorderColor: 'rgba(0,177,64, 1)',\r\n                      order: 6,\r\n                    },\r\n                    */\r\n                    {\r\n                      type: 'line',\r\n                      label: \"All 4 PREDICTED MOVING AVERAGE\",\r\n                      data: payload.MASTERCORE,\r\n                      backgroundColor: 'rgba(255, 113, 16, 0.7)',\r\n                      borderColor: 'rgba(255, 113, 16, 0.9)',\r\n                      pointBorderColor: 'rgba(255, 113, 16, 0.9)',\r\n                      order: 7,\r\n                    },\r\n                    {\r\n                      type: 'line',\r\n                      label: \"AVERAGE OF LATESS OPEN VS PREDICTED OPEN\",\r\n                      data: payload.Elem1,\r\n                      backgroundColor: 'rgba(255, 0, 0, 0.4)',\r\n                      borderColor: 'rgba(255, 0, 0, 0.9)',\r\n                      pointBorderColor: 'rgba(25, 16, 0, 1)',\r\n                      order: 8,\r\n                    },\r\n                    {\r\n                      type: 'line',\r\n                      label: \"AVERAGE OF LATTESS HIGH VS PREDICTED HIGH\",\r\n                      data: payload.Elem2,\r\n                      backgroundColor: 'rgba(22, 91, 160, 1)',\r\n                      borderColor: '\trgba(22, 91, 160, 1)',\r\n                      pointBorderColor: 'rgba(22, 91, 160, 1)',\r\n                      order: 9,\r\n                    },\r\n                    {\r\n                      type: 'line',\r\n                      label: \"AVERAGE OF LATESS LOW VS PREDICTED LOW\",\r\n                      data: payload.Elem3,\r\n                      backgroundColor: 'rgba(255, 255, 0, 0.7)',\r\n                      borderColor: 'rgba(255, 255, 0, 0.9)',\r\n                      pointBorderColor: 'rgba(255, 255, 0, 1)',\r\n                      order: 10,\r\n                    },\r\n                    {\r\n                      type: 'line',\r\n                      label: \"AVERAGE OF LATESS CLOSE VS PREDICTED CLOSE\",\r\n                      data: payload.Elem4,\r\n                      backgroundColor: 'rgba(0,177,64, 1)',\r\n                      borderColor: 'rgba(0,177,64, 1)',\r\n                      pointBorderColor: 'rgba(0,177,64, 1)',\r\n                      order: 11,\r\n                    },\r\n                  ]\r\n                },\r\n                dataC: {\r\n                  labels:payload.epoxResult,\r\n                  datasets: [\r\n                    {\r\n                    type: 'line',\r\n                    label: \"WIDTH VALUE OF NEURAL NETWORK HIGH AND LOW\",\r\n                    data: payload.mouthSize,\r\n                    backgroundColor: 'rgba(22, 91, 160, 0.7)',\r\n                    borderColor: '\trgba(22, 91, 160, 0.9)',\r\n                    pointBorderColor: 'rgba(22, 91, 160, 1)',\r\n                    order: 1\r\n                    },\r\n                    {\r\n                      type: 'line',\r\n                      label: \"VALUE OF NEURAL NETWORK HIGH VS MARKET LATESS HIGH\",\r\n                      data: payload.mouthCeilingSize,\r\n                      backgroundColor: 'rgba(22, 91, 160, 0.7)',\r\n                      borderColor: 'rgba(200,100,0, 0.9)',\r\n                      pointBorderColor: 'rgba(200,100,0, 0.9)',\r\n                      order: 2\r\n                      },\r\n                      {\r\n                        type: 'line',\r\n                        label: \"WIDTH VALUE OF NEURAL NETWORK LOW VS LATESS LOW\",\r\n                        data: payload.mouthFloorSize,\r\n                        backgroundColor:'rgba(255,55,0, 0.8)',\r\n                        borderColor: 'rgba(255,55,0, 0.9)',\r\n                        pointBorderColor: 'rgba(220,55,0, 0.9)',\r\n                        order: 3\r\n                        },\r\n                    {\r\n                      type: 'line',\r\n                      label: \"WIDTH VALUE OF MARKET HIGH AND LOW\",\r\n                      data: payload.TongueSize,\r\n                      backgroundColor:'rgba(255,255,0, 0.8)',\r\n                      borderColor: 'rgba(255,255,0, 0.9)',\r\n                      pointBorderColor: 'rgba(255,255,0, 0.9)',\r\n                      order: 4\r\n                      },\r\n                      {\r\n                        type: 'line',\r\n                        label: \"ZER0 LINE\",\r\n                        data: payload.theZeroLine,\r\n                        backgroundColor: 'rgba(255, 113, 16, 1)',\r\n                        borderColor: 'rgba(255, 113, 16, 1)',\r\n                        pointBorderColor: 'rgba(255, 113, 16, 1)',\r\n                        order: 5\r\n                        },\r\n                  ]\r\n                 },\r\n                 dataF: {\r\n                  labels:payload.epoxResult,\r\n                  datasets: [\r\n                   {\r\n                    type: 'line',\r\n                    label: \"OPEN VS THE PREDICTED AVERAGE OF ALL OHLC\",\r\n                    data: payload.OpenP1,\r\n                    backgroundColor: 'rgba(255, 0, 0, 1)',\r\n                    borderColor: 'rgba(0, 0, 0, 0.8)',\r\n                    pointBorderColor: 'rgba(0, 0, 0 , 0.8)',\r\n                    order: 1\r\n                    },\r\n                    {\r\n                      type: 'line',\r\n                      label: \"ELEM1(=latess open average with predicted open) VS THE PREDICTED AVERAGE OF ALL OHLC\",\r\n                      data: payload.ElemP1,\r\n                      backgroundColor: 'rgba(255, 0, 0, 0.4)',\r\n                      borderColor: 'rgba(255, 0, 0, 0.9)',\r\n                      pointBorderColor: 'rgba(25, 16, 0, 1)',\r\n                      order: 2\r\n                      },\r\n                      {\r\n                        type: 'line',\r\n                        label: \"HIGH VS THE PREDICTED AVERAGE OF ALL OHLC\",\r\n                        data: payload.HighP2,\r\n                        backgroundColor: 'rgba(22, 91, 160, 1)',\r\n                        borderColor: 'rgba(0, 0, 0, 0.8)',\r\n                        pointBorderColor: 'rgba(0, 0, 0 , 0.8)',\r\n                        order: 3\r\n                        },\r\n                        {\r\n                          type: 'line',\r\n                          label: \"ELEM2(=latess open average with predicted open) VS THE PREDICTED AVERAGE OF ALL OHLC\",\r\n                          data: payload.ElemP2,\r\n                          backgroundColor: 'rgba(22, 91, 160, 1)',\r\n                          borderColor: '\trgba(22, 91, 160, 0.9)',\r\n                          pointBorderColor: 'rgba(22, 91, 160, 1)',\r\n                          order: 4\r\n                          },\r\n                          {\r\n                            type: 'line',\r\n                            label: \"LOW VS THE PREDICTED AVERAGE OF ALL OHLC\",\r\n                            data: payload.LowP3,\r\n                            backgroundColor: 'rgba(255, 255, 0, 0.7)',\r\n                            borderColor: 'rgba(0, 0, 0, 0.8)',\r\n                            pointBorderColor: 'rgba(0, 0, 0 , 0.8)',\r\n                            order: 5\r\n                            },\r\n                            {\r\n                              type: 'line',\r\n                              label: \"ELEM3(=latess open average with predicted open) VS THE PREDICTED AVERAGE OF ALL OHLC\",\r\n                              data: payload.ElemP3,\r\n                              backgroundColor: 'rgba(255, 255, 0, 0.7)',\r\n                              borderColor: 'rgba(255, 255, 0, 0.9)',\r\n                              pointBorderColor: 'rgba(255, 255, 0, 1)',\r\n                              order: 6\r\n                              },\r\n                              {\r\n                                type: 'line',\r\n                                label: \"CLOSE VS THE PREDICTED AVERAGE OF ALL OHLC\",\r\n                                data: payload.CloseP4,\r\n                                backgroundColor: 'rgba(0,177,64, 1)',\r\n                                borderColor: 'rgba(0, 0, 0, 0.8)',\r\n                                pointBorderColor: 'rgba(0, 0, 0 , 0.8)',\r\n                                order: 7\r\n                                },\r\n                                {\r\n                                  type: 'line',\r\n                                  label: \"ELEM4(=latess open average with predicted open) VS THE PREDICTED AVERAGE OF ALL OHLC\",\r\n                                  data: payload.ElemP4,\r\n                                  backgroundColor: 'rgba(0,177,64, 1)',\r\n                                  borderColor: 'rgba(0,177,64, 1)',\r\n                                  pointBorderColor: 'rgba(0,177,64, 1)',\r\n                                  order: 8\r\n                                  },\r\n                                  {\r\n                                    type: 'line',\r\n                                    label: \"ZEROLINE\",\r\n                                    data: payload.theZeroLine,\r\n                                    backgroundColor: 'rgba(255, 113, 16, 1)',\r\n                                    borderColor: 'rgba(255, 113, 16, 1)',\r\n                                    pointBorderColor: 'rgba(255, 113, 16, 1)',\r\n                                    order: 9\r\n                                    },\r\n                                   ]\r\n                                   },\r\n                  dataG: {\r\n                    labels:payload.epoxResult,\r\n                     datasets: [\r\n                      {\r\n                        type: 'line',\r\n                        label: \"sub-Latess-OPEN-vs-Predicted\",\r\n                        data: payload.subLatessOPvsPredicted,\r\n                        backgroundColor: 'rgba(255, 0, 0, 0.4)',\r\n                        borderColor: 'rgba(255, 0, 0, 0.9)',\r\n                        pointBorderColor: 'rgba(25, 16, 0, 1)',\r\n                        order: 1,\r\n                      },\r\n                        {\r\n                          type: 'line',\r\n                          label: \"sub-Latess-CL0SE-vs-Predicted\",\r\n                          data: payload.subLatessCLVSPredicted,\r\n                          backgroundColor: 'rgba(255, 113, 16, 0.7)',\r\n                          borderColor: 'rgba(0,177,64, 1)',\r\n                          pointBorderColor: 'rgba(0,177,64, 1)',\r\n                          order: 2,\r\n                        },\r\n                        {\r\n                          type: 'line',\r\n                          label: \"sub-latess-HIGH-vs-Predicted\",\r\n                          data: payload.subLatessHGHvsPredicted,\r\n                          backgroundColor: 'rgba(22, 91, 160, 0.7)',\r\n                          borderColor: '\trgba(22, 91, 160, 0.9)',\r\n                          pointBorderColor: 'rgba(22, 91, 160, 1)',\r\n                          order: 3,\r\n                        },\r\n                        {\r\n                          type: \"line\",\r\n                          label: \"sub-Latess-LOW-vs-Predicted\" ,\r\n                          data: payload.subLatessLWvsPredicted,                        \r\n                          backgroundColor: 'rgba(255, 255, 0, 1)',\r\n                          borderColor: 'rgba(0, 0, 0, 0.8)',\r\n                          pointBorderColor: 'rgba(0, 0, 0 , 0.8)',\r\n                          order: 4,\r\n                        },\r\n                        {\r\n                          type: 'line',\r\n                          label: \"ZER0 LINE\",\r\n                          data: payload.theZeroLine,\r\n                          backgroundColor: 'rgba(255, 113, 16, 1)',\r\n                          borderColor: 'rgba(255, 113, 16, 1)',\r\n                          pointBorderColor: 'rgba(255, 113, 16, 1)',\r\n                          order: 5\r\n                          },\r\n                         ]\r\n                         },\r\n                dataOPEN: {\r\n                  labels: payload.epoxResult,\r\n                   datasets: [\r\n                     {\r\n                      type: \"line\",\r\n                      label: \"BTC LATESS OPEN PRICE\" ,\r\n                      data: payload.openResult,                        \r\n                      backgroundColor: 'rgba(255, 0, 0, 1)',\r\n                      borderColor: 'rgba(0, 0, 0, 0.8)',\r\n                      pointBorderColor: 'rgba(0, 0, 0 , 0.8)',\r\n                      order: 1,\r\n                     },\r\n                  {\r\n                    type: 'line',\r\n                    label: \"PREDICTED OPEN\",\r\n                    data: payload.OpenBrainResultf,\r\n                    backgroundColor: 'rgba(255, 0, 0, 0.4)',\r\n                    borderColor: 'rgba(255, 0, 0, 0.9)',\r\n                    pointBorderColor: 'rgba(25, 16, 0, 1)',\r\n                    order: 2,\r\n                  },\r\n\r\n                  {\r\n                    type: 'line',\r\n                    label: \"12 LINES CORE AVERAGE\",\r\n                    data: payload.MASTERCORE,\r\n                    backgroundColor: 'rgba(255, 113, 16, 0.7)',\r\n                    borderColor: 'rgba(255, 113, 16, 0.9)',\r\n                    pointBorderColor: 'rgba(255, 113, 16, 0.9)',\r\n                    order: 3,\r\n                  },\r\n                ]\r\n              },\r\n              dataTimeTwistOPEN: {\r\n                labels: payload.epoxResult,\r\n                datasets: [\r\n              {\r\n                type: 'line',\r\n                label: \"***OPEN BRAIN RESULT AVG WITH CORE LINES***  \",\r\n                data: payload.predictedOPvs8Lines,\r\n                backgroundColor: 'rgba(255, 120, 0, 1)',\r\n                borderColor: 'rgba(255, 0, 0, 1)',\r\n                pointBorderColor: 'rgba(255, 120, 0, 1)',\r\n                order: 1,\r\n              },\r\n              {\r\n                type: 'line',\r\n                label: \"***OPEN LATESS RESULT AVG WITH CORE LINES***\",\r\n                data: payload.latessOPvs8Lines,\r\n                backgroundColor: 'rgba(255, 120, 0, 1)',\r\n                borderColor: 'rgba(0, 0, 0, 0.8)',\r\n                pointBorderColor: 'rgba(255, 120, 0, 1)',\r\n                order: 2,\r\n              },\r\n              {\r\n                type: 'line',\r\n                label: \"***ACCUMULATED AVERAGE OF CORE AND PREDICTED (AVG/MINUTES) verses ***CORE***\",\r\n                data: payload.myAvgOPBoxFinalResultI,\r\n                backgroundColor: 'rgba(255, 0, 0, 1)',\r\n                borderColor: 'rgba(255, 255, 255, 1)',\r\n                pointBorderColor: 'rgba(255, 0, 0, 1)',\r\n                order: 3,\r\n              },\r\n              {\r\n                type: 'line',\r\n                label: \"***ACCUMULATED AVERAGE OF CORE AND PREDICTED (AVG/MINUTES) verses ***PREDICTED***\",\r\n                data: payload.myAvgOPBoxFinalResultIB,\r\n                backgroundColor: 'rgba(255, 120, 0, 1)',\r\n                borderColor: 'rgba(255, 255, 255, 1)',\r\n                pointBorderColor: 'rgba(255, 120, 0, 1)',  \r\n                order: 4,\r\n              },\r\n              {\r\n                type: 'line',\r\n                label: \"***ACCUMULATED AVERAGE OF CORE AND LATESS OPEN (AVG/MINUTES) verses ***CORE***\",\r\n                data: payload.myAvgOPBoxFinalResult,\r\n                backgroundColor: 'rgba(255, 120, 0, 1)',\r\n                borderColor: 'rgba(0, 0, 0, 0.4)',\r\n                pointBorderColor: 'rgba(255, 120, 0, 1)',\r\n                order: 5,\r\n              },\r\n              {\r\n                type: 'line',\r\n                label: \"***ACCUMULATED AVERAGE OF CORE AND LATESS OPEN (AVG/MINUTES) verses ***LATESS OPEN***\",\r\n                data: payload.myAvgOPBoxFinalResultB,\r\n                backgroundColor: 'rgba(255, 0, 0, 1)',\r\n                borderColor: 'rgba(0, 0, 0, 0.4)',\r\n                pointBorderColor: 'rgba(255, 0, 0, 1)',\r\n                order: 6,\r\n              },           \r\n\r\n           // subLatessLWvsPredicted\r\n            {\r\n              type: 'line',\r\n              label: \"12 LINES CORE AVERAGE\",\r\n              data: payload.MASTERCORE,\r\n              backgroundColor: 'rgba(255, 113, 16, 0.7)',\r\n              borderColor: 'rgba(255, 113, 16, 0.9)',\r\n              pointBorderColor: 'rgba(255, 255, 0, 1)',\r\n              order: 7,\r\n            },\r\n          ]\r\n        },\r\n              dataHIGH: {\r\n                labels: payload.epoxResult,\r\n                datasets: [{\r\n                  type: \"line\",\r\n                  label: \"BTC LATESS HIGH PRICE\" ,\r\n                  data: payload.highResult,                        \r\n                  backgroundColor: 'rgba(22, 91, 160, 1)',\r\n                  borderColor: 'rgba(0, 0, 0, 0.8)',\r\n                  pointBorderColor: 'rgba(0, 0, 0 , 0.8)',\r\n                  order: 1,\r\n                },\r\n                {\r\n                  type: 'line',\r\n                  label: \"PREDICTED HIGH\",\r\n                  data: payload.HighBrainResultf,\r\n                  backgroundColor: 'rgba(22, 91, 160, 0.7)',\r\n                  borderColor: '\trgba(22, 91, 160, 0.9)',\r\n                  pointBorderColor: 'rgba(22, 91, 160, 1)',\r\n                  order: 2,\r\n                },\r\n                {\r\n                  type: 'line',\r\n                  label: \"12 LINES CORE AVERAGE\",\r\n                  data: payload.MASTERCORE,\r\n                  backgroundColor: 'rgba(255, 113, 16, 0.7)',\r\n                  borderColor: 'rgba(255, 113, 16, 0.9)',\r\n                  pointBorderColor: 'rgba(255, 113, 16, 0.9)',\r\n                  order: 3,\r\n                },\r\n              ]\r\n            },\r\n            dataTimeTwistHIGH: {\r\n              labels: payload.epoxResult,\r\n              datasets: [\r\n                {\r\n                  type: 'line',\r\n                  label: \"***HIGH BRAIN RESULT AVG WITH CORE LINES***  \",\r\n                  data: payload.predictedHGHvs8Lines,\r\n                  backgroundColor: 'rgba(255, 120, 0, 1)',\r\n                  borderColor: 'rgba(22, 91, 160, 1)',\r\n                  pointBorderColor: 'rgba(255, 120, 0, 1)',\r\n                  order: 1,\r\n                },\r\n                {\r\n                  type: 'line',\r\n                  label: \"***HIGH LATESS RESULT AVG WITH CORE LINES***\",\r\n                  data: payload.latessHGHvs8Lines,\r\n                  backgroundColor: 'rgba(255, 120, 0, 1)',\r\n                  borderColor: 'rgba(0, 0, 0, 0.8)',\r\n                  pointBorderColor: 'rgba(255, 120, 0, 1)',\r\n                  order: 2,\r\n                },\r\n                {\r\n                  type: 'line',\r\n                  label: \"***ACCUMULATED AVERAGE OF CORE AND PREDICTED (AVG/MINUTES) verses ***CORE***\",\r\n                  data: payload.myAvgHGHBoxFinalResultI,\r\n                  backgroundColor: 'rgba(22, 91, 160, 1)',\r\n                  borderColor: 'rgba(255, 255, 255, 1)',\r\n                  pointBorderColor: 'rgba(22, 91, 160, 1)',\r\n                  order: 3,\r\n                },\r\n                {\r\n                  type: 'line',\r\n                  label: \"***ACCUMULATED AVERAGE OF CORE AND PREDICTED (AVG/MINUTES) verses ***PREDICTED***\",\r\n                  data: payload.myAvgHGHBoxFinalResultIB,\r\n                  backgroundColor: 'rgba(255, 120, 0, 1)',\r\n                  borderColor: 'rgba(255, 255, 255, 1)',\r\n                  pointBorderColor: 'rgba(255, 120, 0, 1)',  \r\n                  order: 4,\r\n                },\r\n                {\r\n                  type: 'line',\r\n                  label: \"***ACCUMULATED AVERAGE OF CORE AND LATESS HIGH (AVG/MINUTES) verses ***CORE***\",\r\n                  data: payload.myAvgHGHBoxFinalResult,\r\n                  backgroundColor: 'rgba(255, 120, 0, 1)',\r\n                  borderColor: 'rgba(0, 0, 0, 0.4)',\r\n                  pointBorderColor: 'rgba(255, 120, 0, 1)',\r\n                  order: 5,\r\n                },\r\n                {\r\n                  type: 'line',\r\n                  label: \"***ACCUMULATED AVERAGE OF CORE AND LATESS HIGH (AVG/MINUTES) verses ***LATESS HIGH***\",\r\n                  data: payload.myAvgHGHBoxFinalResultB,\r\n                  backgroundColor: 'rgba(22, 91, 160, 1)',\r\n                  borderColor: 'rgba(0, 0, 0, 0.4)',\r\n                  pointBorderColor: 'rgba(22, 91, 160, 1)',\r\n                  order: 6,\r\n                },\r\n              {\r\n                type: 'line',\r\n                label: \"12 LINES CORE AVERAGE\",\r\n                data: payload.MASTERCORE,\r\n                backgroundColor: 'rgba(255, 113, 16, 0.7)',\r\n                borderColor: 'rgba(255, 113, 16, 0.9)',\r\n                pointBorderColor: 'rgba(255, 255, 0, 1)',\r\n                order: 7,\r\n              },\r\n        ]\r\n      },\r\n            dataLOW: {\r\n              labels: payload.epoxResult,\r\n              datasets: [{\r\n                type: \"line\",\r\n                label: \"BTC LATESS LOW PRICE\" ,\r\n                data: payload.lowResult,                        \r\n                backgroundColor: 'rgba(255, 255, 0, 1)',\r\n                borderColor: 'rgba(0, 0, 0, 0.8)',\r\n                pointBorderColor: 'rgba(0, 0, 0 , 0.8)',\r\n                order: 1,\r\n              },\r\n              {\r\n                type: 'line',\r\n                label: \"PREDICTED LOW\",\r\n                data: payload.LowBrainResultf,\r\n                backgroundColor: 'rgba(255, 255, 0, 0.7)',\r\n                borderColor: 'rgba(255, 255, 0, 0.9)',\r\n                pointBorderColor: 'rgba(255, 255, 0, 1)',\r\n                order: 2,\r\n              },\r\n              {\r\n                type: 'line',\r\n                label: \"12 LINES CORE AVERAGE\",\r\n                data: payload.MASTERCORE,\r\n                backgroundColor: 'rgba(255, 113, 16, 0.7)',\r\n                borderColor: 'rgba(255, 113, 16, 0.9)',\r\n                pointBorderColor: 'rgba(255, 113, 16, 0.9)',\r\n                order: 3,\r\n              },\r\n            ]\r\n          },\r\n          dataTimeTwistLOW: {\r\n            labels: payload.epoxResult,\r\n            datasets: [\r\n              {\r\n                type: 'line',\r\n                label: \"***LOW BRAIN RESULT AVG WITH CORE LINES***  \",\r\n                data: payload.predictedLWvs8Lines,\r\n                backgroundColor: 'rgba(255, 120, 0, 1)',\r\n                borderColor: 'rgba(255, 255, 0, 1)',\r\n                pointBorderColor: 'rgba(255, 120, 0, 1)',\r\n                order: 1,\r\n              },\r\n              {\r\n                type: 'line',\r\n                label: \"***LOW LATESS RESULT AVG WITH CORE LINES***\",\r\n                data: payload.latessLWvs8Lines,\r\n                backgroundColor: 'rgba(255, 120, 0, 1)',\r\n                borderColor: 'rgba(0, 0, 0, 0.8)',\r\n                pointBorderColor: 'rgba(255, 120, 0, 1)',\r\n                order: 2,\r\n              },\r\n              {\r\n                type: 'line',\r\n                label: \"***ACCUMULATED AVERAGE OF CORE AND PREDICTED (AVG/MINUTES) verses ***CORE***\",\r\n                data: payload.myAvgLWBoxFinalResultI,\r\n                backgroundColor: 'rgba(255, 255, 0, 1)',\r\n                borderColor: 'rgba(255, 255, 255, 1)',\r\n                pointBorderColor: 'rgba(255, 255, 0, 1)',\r\n                order: 3,\r\n              },\r\n              {\r\n                type: 'line',\r\n                label: \"***ACCUMULATED AVERAGE OF CORE AND PREDICTED (AVG/MINUTES) verses ***PREDICTED***\",\r\n                data: payload.myAvgLWBoxFinalResultIB,\r\n                backgroundColor: 'rgba(255, 120, 0, 1)',\r\n                borderColor: 'rgba(255, 255, 255, 1)',\r\n                pointBorderColor: 'rgba(255, 120, 0, 1)',  \r\n                order: 4,\r\n              },\r\n              {\r\n                type: 'line',\r\n                label: \"***ACCUMULATED AVERAGE OF CORE AND LATESS LOW (AVG/MINUTES) verses ***CORE***\",\r\n                data: payload.myAvgLWBoxFinalResult,\r\n                backgroundColor: 'rgba(255, 120, 0, 1)',\r\n                borderColor: 'rgba(0, 0, 0, 0.4)',\r\n                pointBorderColor: 'rgba(255, 120, 0, 1)',\r\n                order: 5,\r\n              },\r\n              {\r\n                type: 'line',\r\n                label: \"***ACCUMULATED AVERAGE OF CORE AND LATESS LOW (AVG/MINUTES) verses ***LATESS LOW***\",\r\n                data: payload.myAvgLWBoxFinalResultB,\r\n                backgroundColor: 'rgba(255, 255, 0, 1)',\r\n                borderColor: 'rgba(0, 0, 0, 0.4)',\r\n                pointBorderColor: 'rgba(255, 255, 0, 1)',\r\n                order: 6,\r\n              },\r\n            {\r\n              type: 'line',\r\n              label: \"12 LINES CORE AVERAGE\",\r\n              data: payload.MASTERCORE,\r\n              backgroundColor: 'rgba(255, 113, 16, 0.7)',\r\n              borderColor: 'rgba(255, 113, 16, 0.9)',\r\n              pointBorderColor: 'rgba(255, 255, 0, 1)',\r\n              order: 7,\r\n            },\r\n          ]\r\n        },\r\n          dataCLOSE: {\r\n            labels: payload.epoxResult,\r\n            datasets: [\r\n            {\r\n              type: \"line\",\r\n              label: \"BTC LATESS CLOSE PRICE\" ,\r\n              data: payload.closeResult,                        \r\n              backgroundColor: 'rgba(0,177,64, 1)',\r\n              borderColor: 'rgba(0, 0, 0, 0.8)',\r\n              pointBorderColor: 'rgba(0, 0, 0 , 0.8)',\r\n              order: 1,\r\n            },\r\n            {\r\n              type: 'line',\r\n              label: \"PREDICTED CLOSE\",\r\n              data: payload.CloseBrainResultf,\r\n              backgroundColor: 'rgba(0,177,64, 1)',\r\n              borderColor: 'rgba(0,177,64, 1)',\r\n              pointBorderColor: 'rgba(0,177,64, 1)',\r\n              order: 2,\r\n            },\r\n            {\r\n              type: 'line',\r\n              label: \"12 LINES CORE AVERAGE\",\r\n              data: payload.MASTERCORE,\r\n              backgroundColor: 'rgba(255, 113, 16, 0.7)',\r\n              borderColor: 'rgba(255, 113, 16, 0.9)',\r\n              pointBorderColor: 'rgba(255, 113, 16, 0.9)',\r\n              order: 3,\r\n            },\r\n          ]\r\n            \r\n        },\r\n        dataTimeTwist: {\r\n          labels: payload.epoxResult,\r\n          datasets: [\r\n            {\r\n              type: 'line',\r\n              label: \"***CLOSE BRAIN RESULT AVG WITH CORE LINES***  \",\r\n              data: payload.predictedCLVS8Lines,\r\n              backgroundColor: 'rgba(255, 120, 0, 1)',\r\n              borderColor: 'rgba(0,177,64, 1)',\r\n              pointBorderColor: 'rgba(255, 120, 0, 1)',\r\n              order: 1,\r\n            },\r\n            {\r\n              type: 'line',\r\n              label: \"***CLOSE LATESS RESULT AVG WITH CORE LINES***\",\r\n              data: payload.latessCLVS8Lines,\r\n              backgroundColor: 'rgba(255, 120, 0, 1)',\r\n              borderColor: 'rgba(0, 0, 0, 0.8)',\r\n              pointBorderColor: 'rgba(255, 120, 0, 1)',\r\n              order: 2,\r\n            },\r\n            {\r\n              type: 'line',\r\n              label: \"***ACCUMULATED AVERAGE OF CORE AND PREDICTED (AVG/MINUTES) verses ***CORE***\",\r\n              data: payload.myAvgCLBoxFinalResultI,\r\n              backgroundColor: 'rgba(0,177,64, 1)',\r\n              borderColor: 'rgba(255, 255, 255, 1)',\r\n              pointBorderColor: 'rgba(0,177,64, 1)',\r\n              order: 3,\r\n            },\r\n            {\r\n              type: 'line',\r\n              label: \"***ACCUMULATED AVERAGE OF CORE AND PREDICTED (AVG/MINUTES) verses ***PREDICTED***\",\r\n              data: payload.myAvgCLBoxFinalResultIB,\r\n              backgroundColor: 'rgba(255, 120, 0, 1)',\r\n              borderColor: 'rgba(255, 255, 255, 1)',\r\n              pointBorderColor: 'rgba(255, 120, 0, 1)',  \r\n              order: 4,\r\n            },\r\n            {\r\n              type: 'line',\r\n              label: \"***ACCUMULATED AVERAGE OF CORE AND LATESS CLOSE (AVG/MINUTES) verses ***CORE***\",\r\n              data: payload.myAvgCLBoxFinalResult,\r\n              backgroundColor: 'rgba(255, 120, 0, 1)',\r\n              borderColor: 'rgba(0, 0, 0, 0.4)',\r\n              pointBorderColor: 'rgba(255, 120, 0, 1)',\r\n              order: 5,\r\n            },\r\n            {\r\n              type: 'line',\r\n              label: \"***ACCUMULATED AVERAGE OF CORE AND LATESS CLOSE (AVG/MINUTES) verses ***LATESS CLOSE***\",\r\n              data: payload.myAvgCLBoxFinalResultB,\r\n              backgroundColor: 'rgba(0,177,64, 1)',\r\n              borderColor: 'rgba(0, 0, 0, 0.4)',\r\n              pointBorderColor: 'rgba(0,177,64, 1)',\r\n              order: 6,\r\n            },\r\n          {\r\n            type: 'line',\r\n            label: \"12 LINES CORE AVERAGE \",\r\n            data: payload.MASTERCORE,\r\n            backgroundColor: 'rgba(255, 113, 16, 0.7)',\r\n            borderColor: 'rgba(255, 113, 16, 0.9)',\r\n            pointBorderColor: 'rgba(255, 255, 0, 1)',\r\n            order: 7,\r\n          },\r\n        ]\r\n      }, \r\n                dataH: {\r\n                   exports : [\r\n                    {\r\n                    data: payload.LayerIIHighResultElem2\r\n                    }],\r\n                  labels:payload.epoxResult,\r\n                  datasets: [\r\n                    {\r\n                      type: 'line',\r\n                      label: \"MESUREMENT OF OPEN PRICE TREND FORCE VS 0\",\r\n                      data: payload.MomYOpenMesurement,\r\n                      backgroundColor: 'rgba(255, 0, 0, 0.4)',\r\n                      borderColor: 'rgba(255, 0, 0, 0.9)',\r\n                      pointBorderColor: 'rgba(25, 16, 0, 1)',\r\n                      order: 1\r\n                      },            \r\n                      {\r\n                      type: 'line',\r\n                      label: \"MESUREMENT OF HIGH PRICE TREND FORCE VS 0\",\r\n                      data: payload.MomYHighMesurement,\r\n                      backgroundColor: 'rgba(22, 91, 160, 1)',\r\n                      borderColor: '\trgba(22, 91, 160, 1)',\r\n                      pointBorderColor: 'rgba(22, 91, 160, 1)',\r\n                      order: 2\r\n                      },\r\n                      {\r\n                      type: 'line',\r\n                      label: \"MESUREMENT OF LOW PRICE TREND FORCE VS 0\",\r\n                      data: payload.MomYLowMesurement,\r\n                      backgroundColor: 'rgba(255, 255, 0, 0.7)',\r\n                      borderColor: 'rgba(255, 255, 0, 0.9)',\r\n                      pointBorderColor: 'rgba(255, 255, 0, 1)',\r\n                      order: 7\r\n                      },\r\n                      {\r\n                      type: 'line',\r\n                      label: \"MESUREMENT OF CLOSE PRICE TREND FORCE VS 0\",  \r\n                      data: payload.MomYCloseMesurement,\r\n                      backgroundColor: 'rgba(0,177,64, 1)',\r\n                      borderColor: 'rgba(0,177,64, 1)',\r\n                      pointBorderColor: 'rgba(0,177,64, 1)',\r\n                      order: 8\r\n                      },\r\n                        {\r\n                          type: 'line',\r\n                          label: \"ZER0 LINE\",\r\n                          data: payload.theZeroLine,\r\n                          backgroundColor: 'rgba(255, 113, 16, 1)',\r\n                          borderColor: 'rgba(255, 113, 16, 1)',\r\n                          pointBorderColor: 'rgba(255, 113, 16, 1)',\r\n                          order: 9\r\n                          },\r\n                        ]\r\n                      },\r\n                    }\r\n                     default: return state;\r\n                     }\r\n                     }\r\n                      export default brainReducer;\r\n\r\n","import { combineReducers } from \"redux\";\r\nimport bitcoinReducer from \"./bitcoinReducer\";\r\nimport brainReducer from \"./brainReducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n  bitcoin: bitcoinReducer,\r\n  brain: brainReducer\r\n})\r\n\r\nexport default rootReducer;","import { createStore, applyMiddleware } from \"redux\";\r\nimport rootReducer from \"./reducers/rootReducer\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\nimport thunk from \"redux-thunk\";\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  composeWithDevTools(applyMiddleware(thunk))\r\n)\r\n\r\nexport default store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"./Store\";\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>\r\n  , document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}