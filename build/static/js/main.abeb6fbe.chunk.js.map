{"version":3,"sources":["actions/bitcoinActions.js","App.js","serviceWorker.js","reducers/bitcoinReducer.js","reducers/brainReducer.js","reducers/rootReducer.js","Store.js","index.js"],"names":["OpenPredictionBrain","brain","NeuralNetwork","HighPredictionBrain","LowPredictionBrain","ClosePredictionBrain","OpenBrainResult","CloseBrainResult","HighBrainResult","LowBrainResult","globalLength","epoxNum","reponseXopen","reponseXhigh","reponseXlow","reponseXclose","App","dispatch","useDispatch","state","useSelector","bitcoin","stateB","React","useState","num","setNum","fetchData","time","number","a","type","axios","get","responseA","i","data","length","push","DataLength","valueX","ThePrice","HighPrice","LowPrice","ClosePrice","console","log","Date","now","labels","open","high","low","close","openMA","highMA","lowMA","closeMA","CenterOpenBrain","input","hgh","lw","cl","output","op","train","iterations","errorThresh","learningRate","momentum","CenterOpenResult","run","RightHighBrain","RightHighResult","LeftLowBrain","LeftLowResult","CenterCloseBrain","CenterCloseResult","openPriceResult","openPriceOverFlow","L","gaga","splice","highPriceResult","highPriceOverFlow","Lh","gagaH","lowPriceResult","lowPriceOverFlow","Ll","gagaL","closePriceResult","closePriceOverFlow","Lc","gagac","openBrainResult","brOPI","AvgElem1OpenOpen","Elem1","elemOf1","elemOf1B","elemOf1C","highBrainResult","hghVSI","AvgElem2HighHigh","Elem2","elemOf2","elemOf2B","elemOf2C","lowBrainResult","lowVSI","AvgElem3LowLow","Elem3","elemOf3","elemOf3B","elemOf3C","closeBrainResult","clVSI","AvgElem4CloseClose","Elem4","elemOf4","elemOf4B","elemOf4C","LowPredicted","RealLow","HghPredicted","RealHigh","ClsPredicted","RealClose","RvsPredicted","midOP","midOPI","payload","getData","className","style","marginLeft","marginRight","onClick","loading","onChange","e","target","value","setInterval","options","responsive","height","width","dataC","dataD","Boolean","window","location","hostname","match","initalState","datasets","label","backgroundColor","borderColor","pointBorderColor","borderWidth","bitcoinReducer","action","order","Loading","dataB","scales","x","ticks","callback","index","values","brainReducer","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.abeb6fbe.chunk.js","sourcesContent":["import axios from \"axios\";\r\nimport brain from 'brain.js/src/index';\r\n\r\n// INITIALIZING FOUR NEW NEURAL NETWORK INSTANCES \r\nconst OpenPredictionBrain = new brain.NeuralNetwork();\r\nconst HighPredictionBrain = new brain.NeuralNetwork();\r\nconst LowPredictionBrain = new brain.NeuralNetwork();\r\nconst ClosePredictionBrain = new brain.NeuralNetwork();\r\n\r\n//const timeStamp = [];\r\n\r\n\r\n//THE A.I. PREDICTION RESULT: INITIALIZING ARRAYS\r\nconst OpenBrainResult = [];\r\nconst CloseBrainResult = [];\r\nconst HighBrainResult = [];\r\nconst LowBrainResult = [];\r\n\r\n    //INITIALIZING ARRAYS FOR THE AXIOS GET FUNCTION \r\n    //const globalValueX = [];\r\n    const globalLength = [];\r\n    const epoxNum = [];\r\n    const reponseXopen = [];\r\n    const reponseXhigh = [];\r\n    const reponseXlow = [];\r\n    const reponseXclose = [];\r\n\r\nexport const getData = ({ time, number }) => async dispatch => {\r\n  try {\r\n    dispatch({\r\n      type: \"AWAITING_BITCOIN\"\r\n    })\r\n \r\n  //THE ACTUAL IMPLEMENTATION OF THE AXIOS GET FUNCTION ***REMINDER BINANCE MAX CALL IS 500 \r\nconst responseA = await axios.get(`https://api.binance.com/api/v3/klines?symbol=ETHUSDT&interval=1m`)\r\n      for (let i = 0; i < (responseA.data.length); i++) {  \r\n        globalLength.push(responseA.data.length)\r\n        epoxNum.push(responseA.data[i][0]);\r\n        reponseXopen.push(responseA.data[i][1]);\r\n        reponseXhigh.push(responseA.data[i][2]);\r\n        reponseXlow.push(responseA.data[i][3]);\r\n        reponseXclose.push(responseA.data[i][4]);\r\n       \r\n      }\r\n const DataLength = epoxNum.length - 1;\r\n   let valueX = reponseXopen.length - 1;\r\n\r\n  \r\n  \r\n    //INITIALIZE SOME ARRAYS FOR TASKS\r\n\r\nconst ThePrice = [];\r\nconst HighPrice = [];\r\nconst LowPrice = [];\r\nconst ClosePrice = [];\r\n\r\nconsole.log(epoxNum.length)\r\nconsole.log(globalLength[0], 'ClosePrice: ', ClosePrice)\r\n\r\n//THE TASKS TO PROPOGATE THE DATA FOR THOSE INITIAL ARRAYS \r\n\r\n      ThePrice.push(reponseXopen[valueX]);   \r\n      HighPrice.push(reponseXhigh[valueX]);  \r\n      LowPrice.push(reponseXlow[valueX]); \r\n      ClosePrice.push(reponseXclose[499]);\r\n\r\n\r\n      console.log(ThePrice)\r\n      console.log(HighPrice);\r\n      console.log(LowPrice);\r\n      console.log(ClosePrice);\r\n\r\n\r\n// CONSOLE LOG ANY THING THAT MIGHT HELP YOU BUILD A BETTER FUTUR \r\nconsole.log(Date.now())\r\nconsole.log('OPEN PRICE: ',reponseXopen[0], '-: ', reponseXopen[valueX]);\r\nconsole.log('HIGH PRICE: ',reponseXhigh[0], '-: ', reponseXhigh[valueX]);\r\nconsole.log('LOW PRICE: ',reponseXlow[0], '-: ', reponseXlow[valueX]);\r\nconsole.log('CLOSE PRICE: ',reponseXclose[0], '-: ', reponseXclose[valueX]);\r\n \r\n// INITIALIZING MORE ARRAYS FOR MORE TASKS \r\n    const labels = [];\r\n\r\n    //THE CHART'S KLINE ARRAYS\r\n    const open = [];\r\n    const high = [];\r\n    const low = [];\r\n    const close = [];\r\n\r\n//INITIALIZING MOVING AVERAGE ARRAYS\r\n    const openMA = [];\r\n    const highMA = [];\r\n    const lowMA = [];\r\n    const closeMA = [];\r\n\r\n//TASK TO PROPOGATE THE KLINE DATA TO THE CHART\r\n    for (let i = 0; i < (reponseXopen.length); i++) {\r\n    \r\n      highMA.push(reponseXhigh[i]) //For task check: this:)\r\n      labels.push(epoxNum[i]) //For task check: this:)\r\n      open.push(reponseXopen[i]) //For task check: this:)\r\n      high.push(reponseXhigh[ i]) //For task check: this:)\r\n      close.push(reponseXclose[i]) //For task check: this:)\r\n      low.push(reponseXlow[i]) //For task check: this:) line...to be continued...\r\n\r\n\r\n      openMA.push(reponseXopen[i])\r\n      highMA.push(reponseXhigh[i])\r\n      lowMA.push(reponseXlow[i])\r\n      closeMA.push(reponseXclose[i])\r\n      \r\n             \r\n\r\n      if (i === (number - 1)) {\r\n        break;\r\n      }\r\n    }\r\n \r\n\r\n////////////////////////////////******//BEGINING OF THE NEURAL NETWORK//*********\r\n\r\n// THE OPEN PRICE NEURAL NETWORK PREDICTION BRAIN #1\r\n    const CenterOpenBrain = [];\r\n    for (let i = 0; i < reponseXopen.length; i++) {\r\n\r\n\r\n      CenterOpenBrain.push({\r\n\t\t  input: {\r\n\t\t\t    hgh: reponseXhigh[i] * 0.0001,\r\n\t\t\t     lw: reponseXlow[i] * 0.0001,\r\n\t\t\t     cl: reponseXclose[i] * 0.0001,\r\n\t\t\t      },\r\n\t\t  output: {\r\n\t\t\t  op: reponseXopen[i] * 0.0001,\r\n\t\t\t\t\t}\r\n        })\r\n      }\r\n      console.log('BRAIN OPEN PRICE TRAINING ARRAY : ', CenterOpenBrain)\r\n\r\n      OpenPredictionBrain.train(CenterOpenBrain, {\r\n        iterations: 20500,\r\n        errorThresh: 0.0005,\r\n        log: false,\r\n        learningRate: 0.3,\r\n        momentum: 0.08\r\n           });\r\n\r\n           const CenterOpenResult = OpenPredictionBrain.run({\r\n\r\n                   hgh: reponseXhigh[499] * 0.0001,\r\n                    lw: reponseXlow[499] * 0.0001,\r\n                    cl: reponseXclose[499] * 0.0001,\r\n                    });\r\n\r\n// THE HIGH PRICE NEURAL NETWORK PREDICTION BRAIN #2\r\n                             const RightHighBrain = [];\r\n                             for (let i = 0; i < reponseXhigh.length; i++) {\r\n         \r\n                               RightHighBrain.push({\r\n                                 input: {\r\n                                     cl: reponseXclose[i] * 0.0001,\r\n                                     lw: reponseXlow[i] * 0.0001,\r\n                                     op: reponseXopen[i] * 0.0001,\r\n                               },\r\n                               output: {\r\n                                 hgh: reponseXhigh[i] * 0.0001,\r\n                                 }\r\n                               })\r\n                             }\r\n                             console.log('BRAIN HIGH PRICE TRAINING ARRAY : ', RightHighBrain)\r\n                      \r\n                             HighPredictionBrain.train(RightHighBrain, {\r\n                                 errorThresh: 0.0005,\r\n                                 log: true, \r\n                                 learningRate: 0.3,\r\n                                 momentum: 0.08\r\n                                });\r\n                                const RightHighResult = HighPredictionBrain.run({\r\n         \r\n                                 op: reponseXopen[499] * 0.0001,\r\n                                 lw: reponseXlow[499] * 0.0001,\r\n                                 cl: reponseXclose[499] * 0.0001\r\n                                 });\r\n\r\n // THE LOW PRICE NEURAL NETWORK PREDICTION BRAIN #3\r\n                    const LeftLowBrain = [];\r\n                    for (let i = 0; i < reponseXlow.length; i++) {\r\n\r\n                      LeftLowBrain.push({\r\n                        input: {\r\n                            hgh: reponseXhigh[i] * 0.0001,\r\n                             cl: reponseXclose[i] * 0.0001,\r\n                             op: reponseXopen[i] * 0.0001,\r\n                      },\r\n                       output: {\r\n                             lw: reponseXlow[i] * 0.0001,\r\n                      }\r\n                      })\r\n                    }\r\n                    console.log('BRAIN LOW PRICE TRAINING ARRAY :', LeftLowBrain)\r\n                    LowPredictionBrain.train(LeftLowBrain, {\r\n                        errorThresh: 0.0005,\r\n                        log: true, \r\n                        learningRate: 0.3,\r\n                        momentum: 0.08\r\n                       });\r\n                       const LeftLowResult = LowPredictionBrain.run({\r\n\r\n                         hgh: reponseXhigh[499] * 0.0001,\r\n                          op: reponseXopen[499] * 0.0001,\r\n                          cl: reponseXclose[499] * 0.0001,\r\n                        });\r\n\r\n// THE CLOSE PRICE NEURAL NETWORK PREDICTION BRAIN #4\r\n                    const CenterCloseBrain = [];\r\n                    for (let i = 0; i < reponseXclose.length; i++) {\r\n\r\n                      CenterCloseBrain.push({\r\n                      input: {\r\n                            hgh: reponseXhigh[i] * 0.0001,\r\n                             lw: reponseXlow[i] * 0.0001,\r\n                             op: reponseXopen[i] * 0.0001,\r\n                      },\r\n                      output: {\r\n                             cl: reponseXclose[i] * 0.0001,\r\n                        }\r\n                      })\r\n                    }\r\n                    console.log('BRAIN CLOSE PRICE TRAINING ARRAY : ', CenterCloseBrain)\r\n                    ClosePredictionBrain.train(CenterCloseBrain, {\r\n                        errorThresh: 0.0005,\r\n                        log: true, \r\n                        learningRate: 0.3,\r\n                        momentum: 0.08\r\n                       });\r\n                       const CenterCloseResult = ClosePredictionBrain.run({\r\n\r\n                       hgh: reponseXhigh[499] * 0.0001,\r\n                       lw: reponseXlow[499] * 0.0001,\r\n                       op: reponseXopen[499] * 0.0001,\r\n                        });\r\n\r\n////////////////////////////////******//END OF THE NEURAL NETWORK//*********\r\n\r\n/////////////////////// THE FOUR MAIN PREDICTION RESULT HERE*******\r\n  OpenBrainResult.push(CenterOpenResult.op / 0.0001);\r\n  HighBrainResult.push(RightHighResult.hgh / 0.0001);\r\n  LowBrainResult.push(LeftLowResult.lw / 0.0001);\r\n  CloseBrainResult.push(CenterCloseResult.cl / 0.0001);\r\n\r\n\r\n\r\n\r\n  ////EPOXTIME TASK\r\n  /*\r\nconst epoxArray = [];\r\nconst epoxOverFlow = [];\r\n\r\nfor(let i = 0; i <= epoxArray.length; i++) {\r\n  var M = reponseXopen.length;\r\n  var gogo = OpenBrainResult.length;\r\nif(epoxArray.length < OpenBrainResult.length) {epoxArray.push(reponseXopen[i + M - gogo])}else{epoxArray.push(epoxArray[0])}   \r\nif(epoxArray.length === OpenBrainResult.length) {epoxArray.splice(0,epoxArray[0])} \r\n}\r\nconsole.log(\"Open Price: \", epoxArray)\r\nconsole.log(\"OP over-flow array: \", epoxOverFlow)\r\n*/\r\n////OPEN PRICE RESULT TASK\r\nconst openPriceResult =[];\r\nconst openPriceOverFlow =[];\r\n\r\nfor(let i = 0; i <= openPriceResult.length; i++) {\r\n  var L = reponseXopen.length;\r\n  var gaga = OpenBrainResult.length;\r\nif(openPriceResult.length < OpenBrainResult.length) {openPriceResult.push(reponseXopen[i + L- gaga])}else{openPriceOverFlow.push(openPriceResult[0])}   \r\nif(openPriceResult.length === OpenBrainResult.length) {openPriceOverFlow.splice(0,openPriceResult[0])} \r\n}\r\nconsole.log(\"Open Price: \", openPriceResult);\r\nconsole.log(\"OP over-flow array: \", openPriceOverFlow);\r\n\r\n\r\n////HIGH PRICE RESULT TASK\r\nconst highPriceResult =[];\r\nconst highPriceOverFlow =[];\r\n\r\nfor(let i = 0; i <= openPriceResult.length; i++) {\r\n  var Lh = reponseXopen.length -1;\r\n  var gagaH = OpenBrainResult.length;\r\nif(highPriceResult.length < HighBrainResult.length) {highPriceResult.push(reponseXhigh[i + Lh - gagaH])}else{highPriceOverFlow.push(highPriceResult[0])}   \r\nif(highPriceResult.length === HighBrainResult.length) {highPriceOverFlow.splice(0,highPriceResult[0])} \r\n}\r\nconsole.log(\"High Price: \", highPriceResult);\r\nconsole.log(\"HP over-flow array: \", highPriceOverFlow);\r\n\r\n////LOW PRICE RESULT TASK\r\nconst lowPriceResult =[];\r\nconst lowPriceOverFlow =[];\r\n\r\nfor(let i = 0; i <= lowPriceResult.length; i++) {\r\n  var Ll = reponseXopen.length -1;\r\n  var gagaL = LowBrainResult.length;\r\nif(lowPriceResult.length < LowBrainResult.length) {lowPriceResult.push(reponseXlow[i + Ll- gagaL])}else{lowPriceOverFlow.push(lowPriceResult[0])}   \r\nif(lowPriceResult.length === LowBrainResult.length) {lowPriceOverFlow.splice(0,lowPriceResult[0])} \r\n}\r\nconsole.log(\"Low Price: \", lowPriceResult);\r\nconsole.log(\"LP over-flow array: \", lowPriceOverFlow);\r\n\r\n////CLOSE PRICE RESULT TASK\r\nconst closePriceResult =[];\r\nconst closePriceOverFlow =[];\r\n\r\nfor(let i = 0; i <= openPriceResult.length; i++) {\r\n  var Lc = reponseXclose.length;\r\n  var gagac = OpenBrainResult.length;\r\nif(closePriceResult.length < CloseBrainResult.length) {closePriceResult.push(reponseXclose[i + Lc- gagac])}else{closePriceOverFlow.push(closePriceResult[0])}   \r\nif(closePriceResult.length === CloseBrainResult.length) {closePriceOverFlow.splice(0,closePriceResult[0])} \r\n}\r\nconsole.log(\"Close** Price**: \", closePriceResult);\r\nconsole.log(\"CP** over-flow array: \", closePriceOverFlow);\r\n\r\n////OPEN BRAIN RESULT TASK\r\n  const openBrainResult =[];\r\n  const brOPI =[];\r\n\r\nfor(let i = 0; i < OpenBrainResult.length; i++) {\r\n  if(openBrainResult.length <= number) {openBrainResult.push(OpenBrainResult[i])}else{brOPI.push(openBrainResult[0])}   \r\n  if(openBrainResult.length === number) {brOPI.splice(0,openBrainResult[0])} \r\n}\r\n  console.log(\"OPEN PREDICTED; \", openBrainResult);\r\n  console.log(\"OP: \", brOPI);\r\n\r\n\r\n\r\n////PREPAIR AVERAGE BETWEEN THE ASSET OPEN PRICE AND THE OPEN PREDICTED\r\n  const AvgElem1OpenOpen = [];\r\n  const Elem1 = [];\r\nfor(let i = 0; i < OpenBrainResult.length; i++) {\r\n  var elemOf1 = i;\r\nconsole.log(elemOf1);\r\n  let elemOf1B = openBrainResult[elemOf1] * 0.0001;\r\nconsole.log('PREDICTED OPEN: ', elemOf1B);\r\n  let elemOf1C = openPriceResult[elemOf1] * 0.0001;\r\nconsole.log('OPEN MARKET PRICE: ', elemOf1C);\r\n       Elem1.push([(elemOf1C + elemOf1B) * 0.0005] / 0.0000001);\r\n        AvgElem1OpenOpen.push(Elem1);\r\nif(AvgElem1OpenOpen.length <= i) {AvgElem1OpenOpen.push(Elem1[i])}else{}\r\n}\r\nconsole.log(Elem1);\r\n\r\nconsole.log(AvgElem1OpenOpen);\r\n\r\n\r\n////HIGH BRAIN RESULT TASK\r\n  const highBrainResult = [];\r\n  const hghVSI = [];\r\n  \r\n  for(let i = 0; i < HighBrainResult.length; i++) {\r\n    if(highBrainResult.length <= number) {highBrainResult.push(HighBrainResult[i])}else{hghVSI.push(highBrainResult[0])}   \r\n    if(highBrainResult.length === number) {hghVSI.splice(0,highBrainResult[0])}                              \r\n    }\r\n\r\n  console.log(\"HIGH PREDICTED : \", highBrainResult);\r\n  console.log(\"HP: \", hghVSI);\r\n\r\n      ////PREPAIR AVERAGE BETWEEN THE ASSET HIGH PRICE AND THE HIGH PREDICTED\r\nconst AvgElem2HighHigh = [];\r\nconst Elem2 = [];\r\nfor(let i = 0; i < HighBrainResult.length; i++) {\r\nvar elemOf2 = i;\r\nconsole.log(elemOf2);\r\nlet elemOf2B = highBrainResult[elemOf2] * 0.0001;\r\nconsole.log('PREDICTED HIGH : ', elemOf2B);\r\nlet elemOf2C = highPriceResult[elemOf2] * 0.0001;\r\nconsole.log('HIGH MARKET PRICE: ', elemOf2C);\r\nElem2.push([(elemOf2C + elemOf2B) * 0.0005] / 0.0000001);\r\nAvgElem2HighHigh.push(Elem2);\r\nif(AvgElem2HighHigh.length <= i) {AvgElem2HighHigh.push(Elem2[i])}else{}\r\n}\r\nconsole.log(Elem2);\r\n\r\nconsole.log(AvgElem2HighHigh);\r\n\r\n////LOW BRAIN RESULT TASK \r\n  const lowBrainResult = [];\r\n  const lowVSI = [];\r\n  \r\n  for(let i = 0; i < LowBrainResult.length; i++) {\r\n    if(lowBrainResult.length <= number) {lowBrainResult.push(LowBrainResult[i])}else{lowVSI.push(lowBrainResult[0])}   \r\n    if(lowBrainResult.length === number) {lowVSI.splice(0,lowBrainResult[0])}                              \r\n      }\r\n\r\n  console.log(\"LOW PREDICTED : \", lowBrainResult);\r\n  console.log(\"LP: \",lowVSI);\r\n\r\n      ////PREPAIR AVERAGE BETWEEN THE ASSET LOW PRICE AND THE LOW PREDICTED\r\nconst AvgElem3LowLow = [];\r\nconst Elem3 = [];\r\nfor(let i = 0; i < LowBrainResult.length; i++) {\r\nvar elemOf3 = i;\r\nconsole.log(elemOf3);\r\nlet elemOf3B = lowBrainResult[elemOf3] * 0.0001;\r\nconsole.log('PREDICTED LOW: ', elemOf3B);\r\nlet elemOf3C = lowPriceResult[elemOf3] * 0.0001;\r\nconsole.log('LOW MARKET PRICE: ', elemOf3C);\r\nElem3.push([(elemOf3C + elemOf3B) * 0.0005] / 0.0000001);\r\nAvgElem3LowLow.push(Elem3);\r\nif(AvgElem3LowLow.length <= i) {AvgElem3LowLow.push(Elem2[i])}else{}\r\n};\r\nconsole.log(Elem3);\r\n\r\nconsole.log(AvgElem3LowLow);\r\n\r\n\r\n\r\n\r\n\r\n////CLOSE BRAIN RESULT TASK\r\n  const closeBrainResult = [];\r\n  const clVSI = [];\r\n  \r\n  for(let i = 0; i < CloseBrainResult.length; i++) {\r\n    if(closeBrainResult.length <= number) {closeBrainResult.push(CloseBrainResult[i])}else{clVSI.push(closeBrainResult[0])}   \r\n    if(closeBrainResult.length === number) {clVSI.splice(0,closeBrainResult[0])}                              \r\n    \r\n  }\r\n  console.log(\"CLOSE PREDICTED : \", closeBrainResult);\r\n  console.log(\"CP: \",clVSI);\r\n\r\n\r\n\r\n////PREPAIR AVERAGE BETWEEN THE ASSET CLOSE PRICE AND THE CLOSE PREDICTED\r\nconst AvgElem4CloseClose = [];\r\nconst Elem4 = [];\r\n\r\nfor(let i = 0; i < closeBrainResult.length; i++) {\r\nvar elemOf4 = i;\r\nconsole.log(elemOf4);\r\nlet elemOf4B = closeBrainResult[elemOf4] * 0.1;\r\nconsole.log('PREDICTED CLOSE: ', elemOf4B);\r\nlet elemOf4C = closePriceResult[elemOf4] * 0.1;\r\n\r\nconsole.log('CLOSE MARKET PRICE: ', elemOf4C);\r\nElem4.push([(elemOf4B + elemOf4C) * 0.05] / 0.01);\r\nAvgElem4CloseClose.push(Elem4);\r\nif(AvgElem4CloseClose.length <= i) {AvgElem4CloseClose.push(Elem4[i])}else{}\r\n}\r\nconsole.log(Elem4);\r\n\r\nconsole.log(AvgElem4CloseClose);\r\n\r\n\r\n\r\n\r\n//console.log(\"Incomming Latess Price : \", OpenPrice)\r\nconsole.log(\"Incomming Array Length : \", DataLength)\r\n//console.log(\"ILP: \",opVSI)\r\n\r\n\r\nconsole.log(reponseXopen[valueX] - OpenBrainResult[0])\r\n\r\n const LowPredicted = [LowBrainResult[0] - LowPrice[0]];\r\n const RealLow = [LowPrice[0] - LowBrainResult[0]];\r\n\r\n const HghPredicted = [HighBrainResult[0] - HighPrice[0]]\r\n const RealHigh = [HighPrice[0] - HighBrainResult[0]];\r\n\r\n const ClsPredicted = [CloseBrainResult[0] - ClosePrice[0]];\r\n const RealClose = [ClosePrice[0] - CloseBrainResult[0]];\r\n\r\n const RvsPredicted = [ThePrice[valueX] - OpenBrainResult[0]];\r\n //const PvsReal = [OpenBrainResult[0] - FinalPriceArray];\r\n\r\n const midOP = [];\r\n const midOPI = [];\r\n for(let i = 0; i < highBrainResult.length; i++) {\r\n    if(midOP.length <= number-1) {midOP.push(((HighBrainResult[i] + OpenBrainResult[i] + CloseBrainResult[i]) + LowBrainResult[i]) / 4)}else{midOPI.push(((HighBrainResult[i] + OpenBrainResult[i] + CloseBrainResult[i]) + LowBrainResult[i]) / 4)}   \r\n    if(midOP.length === number) {midOPI.splice(0, midOP[0])}\r\n  }\r\n  console.log(\"midleLine: \",midOP)\r\n  console.log(\"midleLineI: \",midOPI)\r\n/////////////////////////////////////////////////////////////////////\r\n    dispatch({\r\n      type: \"SUCCESS_BITCOIN\",\r\n      payload: {\r\n    \r\n         \r\n         number,\r\n         midOP,\r\n       // epoxDate,\r\n        // epoxArray,\r\n         Elem1,\r\n         Elem2,\r\n         Elem3,\r\n         Elem4,\r\n         ThePrice,\r\n         openPriceResult,\r\n         ClosePrice,\r\n         closeBrainResult,\r\n         highBrainResult,\r\n         lowBrainResult,\r\n         openBrainResult,\r\n    \r\n\r\n\r\n         ClsPredicted,\r\n         RealClose,\r\n\r\n         HghPredicted,\r\n         RealHigh,\r\n\r\n         LowPredicted,\r\n         RealLow,\r\n\r\n         RvsPredicted,\r\n        // PvsReal,\r\n            \r\n         OpenBrainResult,\r\n         CloseBrainResult,\r\n         HighBrainResult,\r\n         LowBrainResult,\r\n\r\n         reponseXopen,\r\n         reponseXhigh,\r\n         reponseXclose,\r\n         reponseXlow,\r\n        // epox,\r\n         open,\r\n         high,\r\n         low,\r\n         close,\r\n         labels\r\n      }\r\n    })\r\n   \r\n  } catch (e) {\r\n    dispatch({\r\n      type: \"REJECTED_BITCOIN\",\r\n    })\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport './App.css';\r\nimport { Line } from 'react-chartjs-2';\r\n//import { Radar } from 'react-chartjs-2';\r\nimport { Bar } from 'react-chartjs-2';\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { getData } from \"./actions/bitcoinActions\";\r\n\r\nfunction App() {\r\n  const dispatch = useDispatch();\r\n  const state = useSelector(state => state.bitcoin)\r\n  const stateB = useSelector(state => state.brain)\r\n  const [num, setNum] = React.useState(500);\r\n    \r\n  const fetchData = (time) => {\r\n    //Fetch data from redux using time\r\n    dispatch(getData({\r\n      time: time,\r\n      number: num,\r\n    }))\r\n  }\r\n\r\n  return (\r\n      <div className=\"App\">\r\n      <div className=\"navbar\">\r\n      <h1 style={{marginLeft:'13px', marginRight:'13px'}}>A.I. FAIR PRICE PREDICTER FUNCTION</h1>\r\n      <h5 style={{marginLeft:'25px'}}>POWERED BY BRAIN.JS, CHART JS, REDUX AND REACT APP</h5>\r\n      </div>\r\n      <div className=\"title\">\r\n      <h1>ETH/USD Timeseries</h1>\r\n      </div>\r\n      <div className={\"btns-wrapper\"}>\r\n            \r\n        <button onClick={(() => {fetchData()})}>ONE TIME PROCESS IMMEDIATELY</button>\r\n            \r\n        {state.loading && <p>Loading...</p>}\r\n      </div>\r\n      <div className=\"info\">\r\n        <h4>Default Settings are 500 data points \"INSERT DATA POINTS\" start the interval of 1 minute</h4>\r\n        <input onChange={e => setNum(e.target.value)} />\r\n        <button onClick={() => setInterval(() => {fetchData(\"1min\")}, 60100)}>INSERT DATA POINTS</button>\r\n          <h4>Behind the scene brain js is setup to only use the data points specified for this training.</h4>\r\n          <h4>Max dataset from Binance is 500 and for every interval of one minute the neural network's array is multiplied by 500</h4>\r\n        <h4>Immediately the brain's result targets the asset price and diverges to its price</h4>\r\n        <h4>We can then compare the asset price diffrence to the neural networks result</h4>\r\n        <h4>Just like we can compare moving averages from one asset to an other we can now use the neural network in the same way. </h4>\r\n      </div>\r\n         <div className={\"chart-wrapper\"}>\r\n      <Line\r\n          data={state.data} options={{responsive: true}}\r\n      /></div>\r\n\r\n         <div className='container'>\r\n         <div className='chartBarVol' style={{height:'80%', width:'80%'}}>\r\n         <Bar\r\n         data={stateB.dataC} options={{responsive: true}}\r\n         /></div>\r\n\r\n         <div className='chartBarLin' style={{height:'100%', width:'fit-content(100)'}}>\r\n         <Line \r\n         data={stateB.dataD} options={{responsive: true}}\r\n         /></div>\r\n          </div>\r\n          <h3 className= 'ticker-sym'> ETH/USD </h3>\r\n           </div>\r\n           );\r\n          }\r\n          export default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","//Random color generator\r\n//var r = () => Math.random() * 256 >> 0;\r\n//var color = `rgb(${r()}, ${r()}, ${r()})`;\r\n//import number from '../App'\r\nconst initalState = {\r\n  loading: false,\r\n  data: {\r\n    labels: [],\r\n    datasets: [{\r\n      type: 'line',\r\n      label: \"ETH close\",\r\n      data: [],\r\n      backgroundColor: 'rgba(226, 153, 18, 0.9)',\r\n      borderColor: 'rgba(178, 116, 0, 1)',\r\n      pointBorderColor: 'rgba(25, 16, 0, 1)',\r\n      borderWidth: 0.5\r\n    }],\r\n    \r\n  },\r\n};\r\n\r\nconst bitcoinReducer = (state = initalState, action) => {\r\n  const { type, payload } = action;\r\n\r\n  switch (type) {\r\n    case \"AWAITING_BITCOIN\":\r\n      return {\r\n        ...state,\r\n        loading: true\r\n      }\r\n    case \"REJECTED_BITCOIN\":\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n      }\r\n    case \"SUCCESS_BITCOIN\":\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        data: {\r\n          labels: payload.labels,\r\n          datasets: [{\r\n            label: \"ETH CLOSE\",\r\n            data: payload.close,\r\n            backgroundColor: 'rgba(226, 153, 18, 0.9)',\r\n            borderColor: 'rgba(178, 116, 0, 1)',\r\n            pointBorderColor: 'rgba(25, 16, 0, 1)',\r\n            order: 3,\r\n            borderWidth: 0.5\r\n          },\r\n          {\r\n            type: 'line',\r\n            label: \"ETH OPEN\",\r\n            data: payload.open,\r\n            backgroundColor: 'rgba(10, 204, 0, 0.3)',\r\n            borderColor: 'rgba(10, 204, 0, 1)',\r\n            pointBorderColor: 'rgba(25, 16, 0, 1)',\r\n            order: 2,\r\n            borderWidth: 0.5\r\n          },{\r\n            type: 'line',\r\n            label: \"ETH HIGH\",\r\n            data: payload.high,\r\n            backgroundColor:'rgba(22, 91, 160, 0.9)',\r\n            borderColor: 'rgba(14, 38, 62,0.9)',\r\n            pointBorderColor: 'rgba(22, 91, 160, 1)',\r\n            order: 4 ,\r\n            borderWidth: 0.5             \r\n          },{\r\n            type: 'line',\r\n            label: \"ETH LOW\",\r\n            data: payload.low,\r\n            backgroundColor:'rgba(246, 239, 28, 0.48)',\r\n            borderColor: 'rgba(255,255,0, 0.9)',\r\n            pointBorderColor: 'rgba(255,255,0, 0.9)',\r\n            order: 1,\r\n            borderWidth: 0.5\r\n          }],\r\n\r\n       },\r\n\r\n        }\r\n         default: return state;\r\n          }\r\n         }\r\n          export default bitcoinReducer;\r\n      \r\n","\r\n\r\nconst initalState = {\r\n    Loading: false,\r\n    dataB: {\r\n      labels: [],\r\n      datasets: [{\r\n        type: 'radar',\r\n        label: \"BOT CHART PREDICTION\",\r\n        data: [],\r\n        backgroundColor: 'rgba(226, 153, 18, 0.9)',\r\n        borderColor: 'rgba(178, 116, 0, 1)',\r\n        pointBorderColor: 'rgba(25, 16, 0, 1)',\r\n        options: {\r\n          responsive: true\r\n        }\r\n      }]\r\n    },\r\n    dataC: {\r\n      labels: [],\r\n      datasets: [{\r\n        type: 'bar',\r\n        label: \"BOT CHART PREDICTION\",\r\n        data: [],\r\n        backgroundColor: 'rgba(226, 153, 18, 0.9)',\r\n        borderColor: 'rgba(178, 116, 0, 1)',\r\n        pointBorderColor: 'rgba(25, 16, 0, 1)',\r\n        options: {\r\n          responsive: true\r\n        }\r\n      }]\r\n    },\r\n    dataD: {\r\n        labels: [],\r\n        datasets: [{\r\n          type: 'line',\r\n          label: \"Real Time vs Open Prediction\",\r\n          data: [],\r\n          backgroundColor: 'rgba(226, 153, 18, 0.9)',\r\n          borderColor: 'rgba(178, 116, 0, 1)',\r\n          pointBorderColor: 'rgba(25, 16, 0, 1)',\r\n          options: {\r\n            scales: {\r\n                x: {\r\n                    ticks: {\r\n                        // Include a dollar sign in the ticks\r\n                        callback: function(value, index, values) {\r\n                            return '$' + value;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        }],\r\n      },\r\n\r\n}\r\nconst brainReducer = (state = initalState, action) => {\r\n    const { type, payload } = action;\r\n\r\n    switch (type) {\r\n        case \"AWAITING_BITCOIN\":\r\n          return {\r\n            ...state,\r\n            loading: true\r\n          }\r\n        case \"REJECTED_BITCOIN\":\r\n          return {\r\n            ...state,\r\n            loading: false,\r\n          }\r\n        case \"SUCCESS_BITCOIN\":\r\n\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n              /*  dataB: {\r\n                  labels: 'OpenBrainResult',\r\n                  datasets: [\r\n                    {\r\n                    type: 'radar',\r\n                    label: \"OPEN PRICE BRAIN PREDICTION\",\r\n                    data: payload.OpenBrainResult[0],// + (number + 1)],\r\n                    backgroundColor: 'rgba(255, 0, 0, 0.4)',\r\n                    borderColor: '\trgba(255, 0, 0, 0.9)',\r\n                    pointBorderColor: 'rgba(25, 16, 0, 1)',\r\n        \r\n                    order: 1\r\n                    },\r\n                    {\r\n                    type: 'radar',\r\n                    label: \"CLOSE PRICE BRAIN PREDICTION\",\r\n                    data: payload.CloseBrainResult,\r\n                    backgroundColor:'rgba(10, 204, 0, 0.7)',\r\n                    borderColor: 'rgba(10, 204, 0, 0.9)',\r\n                    pointBorderColor: 'rgba(10, 204, 0, 0.7)',\r\n        \r\n                    order: 2\r\n                    },\r\n                    {\r\n                    type: 'radar',\r\n                    label: \"HIGH PRICE BRAIN PREDICTION\",\r\n                    data: payload.HighBrainResult, \r\n                    backgroundColor:'rgba(0,0,255, 0.7)',\r\n                    borderColor: 'rgba(0,0,255, 0.9)',\r\n                    pointBorderColor: 'rgba(0,0,255, 0.8)',\r\n        \r\n                    order: 3\r\n                    },\r\n                    {\r\n                    type: 'radar',\r\n                    label: \"LOW PRICE BRAIN PREDICTION\",\r\n                    data: payload.LowBrainResult,\r\n                    backgroundColor:'rgba(255,255,0, 0.8)',\r\n                    borderColor: 'rgba(255,255,0, 0.9)',\r\n                    pointBorderColor: 'rgba(255,255,0, 0.9)',\r\n        \r\n                    order: 4\r\n                    }]\r\n                  },*/\r\n                dataD: {\r\n                      labels: payload.openBrainResult,\r\n                      datasets: [{\r\n                        type: \"line\",\r\n                        label: \"BTC OPEN PRICE\" ,\r\n                        data: payload.openPriceResult,                        \r\n                        backgroundColor: 'rgba(0, 0, 0, 0.6)',\r\n                        borderColor: 'rgba(0, 0, 0, 0.8)',\r\n                        pointBorderColor: 'rgba(0, 0, 0 , 0.8)',\r\n                        order: 1,\r\n                      },\r\n\r\n                      {\r\n                        type: 'line',\r\n                        label: \"PREDICTED OPEN\",\r\n                        data: payload.OpenBrainResult,\r\n                        backgroundColor: 'rgba(255, 0, 0, 0.4)',\r\n                        borderColor: 'rgba(255, 0, 0, 0.9)',\r\n                        pointBorderColor: 'rgba(25, 16, 0, 1)',\r\n                        order: 5,\r\n                      },\r\n                      {\r\n                        type: 'line',\r\n                        label: \"PREDICTED CLOSE\",\r\n                        data: payload.CloseBrainResult,\r\n                        backgroundColor: 'rgba(0,0,255, 0.4)',\r\n                        borderColor: '\trgba(0,0,255, 0.9)',\r\n                        pointBorderColor: 'rgba(0,0,255, 1)',\r\n                        order: 4,\r\n                      },\r\n                      {\r\n                        type: 'line',\r\n                        label: \"PREDICTED HIGH\",\r\n                        data: payload.HighBrainResult,\r\n                        backgroundColor: 'rgba(22, 91, 160, 0.7)',\r\n                        borderColor: '\trgba(22, 91, 160, 0.9)',\r\n                        pointBorderColor: 'rgba(22, 91, 160, 1)',\r\n                        order: 6,\r\n                      },\r\n                      {\r\n                        type: 'line',\r\n                        label: \"PREDICTED LOW\",\r\n                        data: payload.LowBrainResult,\r\n                        backgroundColor: 'rgba(255, 255, 0, 0.7)',\r\n                        borderColor: 'rgba(255, 255, 0, 0.9)',\r\n                        pointBorderColor: 'rgba(255, 255, 0, 1)',\r\n                        order: 7,\r\n                      },\r\n                      {\r\n                        type: 'line',\r\n                        label: \"All 4 PREDICTED MOVING AVERAGE\",\r\n                        data: payload.midOP,\r\n                        backgroundColor: 'rgba(255, 113, 16, 0.7)',\r\n                        borderColor: 'rgba(255, 113, 16, 0.9)',\r\n                        pointBorderColor: 'rgba(255, 113, 16, 0.9)',\r\n                        order: 8,\r\n                      },\r\n                      {\r\n                        type: 'line',\r\n                        label: \"AVERAGE OPEN MARKET VS PREDICTED\",\r\n                        data: payload.Elem1,\r\n                        backgroundColor: 'rgba(255, 0, 0, 0.4)',\r\n                        borderColor: 'rgba(255, 0, 0, 0.9)',\r\n                        pointBorderColor: 'rgba(25, 16, 0, 1)',\r\n                        order: 9,\r\n                      },\r\n                      {\r\n                        type: 'line',\r\n                        label: \"AVERAGE HIGH MARKET VS PREDICTED\",\r\n                        data: payload.Elem2,\r\n                        backgroundColor: 'rgba(22, 91, 160, 0.7)',\r\n                        borderColor: '\trgba(22, 91, 160, 0.9)',\r\n                        pointBorderColor: 'rgba(22, 91, 160, 1)',\r\n                        order: 10,\r\n                      },\r\n                      {\r\n                        type: 'line',\r\n                        label: \"AVERAGE LOW MARKET VS PREDICTED\",\r\n                        data: payload.Elem3,\r\n                        backgroundColor: 'rgba(255, 255, 0, 0.7)',\r\n                        borderColor: 'rgba(255, 255, 0, 0.9)',\r\n                        pointBorderColor: 'rgba(255, 255, 0, 1)',\r\n                        order: 11,\r\n                      },\r\n                      {\r\n                        type: 'line',\r\n                        label: \"AVERAGE CLOSE MARKET VS PREDICTED\",\r\n                        data: payload.Elem4,\r\n                        backgroundColor: 'rgba(0,0,255, 0.4)',\r\n                        borderColor: '\trgba(0,0,255, 0.9)',\r\n                        pointBorderColor: 'rgba(0,0,255, 1)',\r\n                        order: 12,\r\n                      },\r\n                    ]\r\n                  },\r\n                  dataC: {\r\n                    labels:payload.openBrainResult,\r\n                    datasets: [\r\n                      {\r\n                      type: 'line',\r\n                      label: \"Real Time vs Predicted Open \",\r\n                      data: payload.Elem1,\r\n                      backgroundColor: 'rgba(255, 0, 0, 0.4)',\r\n                      borderColor: 'rgba(255, 0, 0, 0.9)',\r\n                      pointBorderColor: 'rgba(25, 16, 0, 1)',\r\n                      order: 1\r\n                      },            \r\n                      {\r\n                      type: 'line',\r\n                      label: \"HIGH PRICE VS PREDICTED A.I. PRICE\",\r\n                      data: payload.Elem2,\r\n                      backgroundColor: 'rgba(22, 91, 160, 0.7)',\r\n                      borderColor: '\trgba(22, 91, 160, 0.9)',\r\n                      pointBorderColor: 'rgba(22, 91, 160, 1)',\r\n                      order: 2\r\n                      },\r\n                      {\r\n                      type: 'line',\r\n                      label: \"LOW PRICE VS PREDICTED A.I. PRICE\",\r\n                      data: payload.Elem3,\r\n                      backgroundColor: 'rgba(255, 255, 0, 0.7)',\r\n                      borderColor: 'rgba(255, 255, 0, 0.9)',\r\n                      pointBorderColor: 'rgba(255, 255, 0, 1)',\r\n                      order: 3\r\n                      },\r\n                      {\r\n                      type: 'line',\r\n                      label: \"CLOSE PRICE VS PREDICTED A.I. PRICE\",\r\n                      data: payload.Elem4,\r\n                      backgroundColor: 'rgba(0,0,255, 0.4)',\r\n                      borderColor: '\trgba(0,0,255, 0.9)',\r\n                      pointBorderColor: 'rgba(0,0,255, 1)',\r\n                      order: 4\r\n                      },\r\n                      {\r\n                        type: 'line',\r\n                        label: \"All 4 PREDICTED MOVING AVERAGE\",\r\n                        data: payload.midOP,\r\n                        backgroundColor: 'rgba(255, 113, 16, 0.7)',\r\n                        borderColor: 'rgba(255, 113, 16, 0.9)',\r\n                        pointBorderColor: 'rgba(255, 113, 16, 0.9)',\r\n                        order: 5,\r\n                      },\r\n                      /*\r\n                      {\r\n                      type: 'bar',\r\n                      label: \"Real High vs Predicted High\",\r\n                      data: payload.RealHigh,\r\n                      backgroundColor: 'rgba(0, 0, 0, 0.6)',\r\n                      borderColor: 'rgba(0, 0, 0, 0.6)',\r\n                      pointBorderColor: 'rgba(0, 0, 0, 1)',\r\n                      order: 5\r\n                      },\r\n                      {\r\n                      type: 'bar',\r\n                      label: \"Predicted High vs Real High\",\r\n                      data: payload.HghPredicted,\r\n                      backgroundColor: 'rgba(22, 91, 160, 0.9)', //blue\r\n                      borderColor: 'rgba(22, 91, 160, 0.9)',\r\n                      pointBorderColor: 'rgba(22, 91, 160, 0.9)',\r\n                      order: 6\r\n                      },\r\n                      {\r\n                      type: 'bar',\r\n                      label: \"Real Low vs Predicted Low\",\r\n                      data: payload.RealLow,\r\n                      backgroundColor: 'rgba(0, 0, 0, 0.9)',\r\n                      borderColor: 'rgba(0, 0, 0, 0.9)',\r\n                      pointBorderColor: 'rgba(0, 0, 0, 0.9)',\r\n                      order: 7\r\n                      },\r\n                      {\r\n                      type: 'bar',\r\n                      label: \"Predicted Low vs Real Low\",\r\n                      data: payload.LowPredicted,\r\n                      backgroundColor: 'rgba(255, 255, 0, 0.9)',\r\n                      borderColor: 'rgba(255, 255, 0, 0.9)',\r\n                      pointBorderColor: 'rgba(255, 255, 0, 0.9)',\r\n                      order: 8\r\n                      }*/\r\n]\r\n                   }\r\n                }\r\n                 default: return state;\r\n                }\r\n             }\r\n             export default brainReducer;\r\n","import { combineReducers } from \"redux\";\r\nimport bitcoinReducer from \"./bitcoinReducer\";\r\nimport brainReducer from \"./brainReducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n  bitcoin: bitcoinReducer,\r\n  brain: brainReducer\r\n})\r\n\r\nexport default rootReducer;","import { createStore, applyMiddleware } from \"redux\";\r\nimport rootReducer from \"./reducers/rootReducer\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\nimport thunk from \"redux-thunk\";\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  composeWithDevTools(applyMiddleware(thunk))\r\n)\r\n\r\nexport default store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"./Store\";\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>\r\n  , document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}